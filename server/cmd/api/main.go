// Code generated by hertz generator.

package main

import (
	"context"
	"net"

	"github.com/Rinai-R/ApexLecture/server/cmd/api/config"
	"github.com/Rinai-R/ApexLecture/server/cmd/api/initialize"
	"github.com/Rinai-R/ApexLecture/server/cmd/api/initialize/rpc"
	"github.com/Rinai-R/ApexLecture/server/cmd/api/middleware"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/hertz-contrib/obs-opentelemetry/provider"
	hertztracing "github.com/hertz-contrib/obs-opentelemetry/tracing"
)

func main() {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	initialize.Initlogger()
	initialize.InitConfig()
	initialize.InitSentinel()
	r, i := initialize.InitRegistry()
	rpc.Initrpc()
	p := provider.NewOpenTelemetryProvider(
		provider.WithServiceName(config.GlobalServerConfig.Name),
		provider.WithExportEndpoint(config.GlobalServerConfig.OtelEndpoint),
		provider.WithInsecure(),
	)
	defer p.Shutdown(ctx)
	tracer, trcCfg := hertztracing.NewServerTracer()
	h := server.New(
		tracer,
		server.WithRegistry(r, i),
		server.WithHostPorts(net.JoinHostPort(config.GlobalServerConfig.Host, config.GlobalServerConfig.Port)),
	)
	h.Use(hertztracing.ServerMiddleware(trcCfg))
	h.Use(middleware.Sentinel)
	register(h)
	h.Spin()
}
