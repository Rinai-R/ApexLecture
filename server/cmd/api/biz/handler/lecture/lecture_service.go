// Code generated by hertz generator.

package lecture

import (
	"context"
	"strconv"

	base "github.com/Rinai-R/ApexLecture/server/cmd/api/biz/model/base"
	lecture "github.com/Rinai-R/ApexLecture/server/cmd/api/biz/model/lecture"
	"github.com/Rinai-R/ApexLecture/server/cmd/api/config"
	rpc "github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/lecture"
	"github.com/Rinai-R/ApexLecture/server/shared/rsp"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateLecture .
// @router lecture/ [POST]
func StartLecture(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lecture.StartRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter(err.Error()))
		return
	}
	id, ok := c.Get("userid")
	if !ok {
		c.JSON(consts.StatusUnauthorized, rsp.ErrorUnAuthorized(""))
		return
	}
	host := id.(float64)
	hostid := int64(host)
	resp, _ := config.LectureClient.Start(ctx, &rpc.StartRequest{
		HostId:      hostid,
		Title:       req.Title,
		Description: req.Description,
		Speaker:     req.Speaker,
		Sdp:         req.Sdp,
	})
	switch resp.Response.Code {
	case rsp.Success:
		c.JSON(consts.StatusOK, resp)
	default:
		c.JSON(consts.StatusBadRequest, resp)
	}
}

// AttendLecture .
// @router lecture/:roomid/attend [POST]
func AttendLecture(ctx context.Context, c *app.RequestContext) {
	var err error
	var req lecture.AttendRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}
	roomid, ok := c.Params.Get("roomid")
	if !ok {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter(err.Error()))
		return
	}
	RoomID, _ := strconv.ParseInt(roomid, 10, 64)
	userid, ok := c.Get("userid")
	if !ok {
		c.JSON(consts.StatusUnauthorized, rsp.ErrorUnAuthorized(err.Error()))
		return
	}
	userId := userid.(float64)
	UserID := int64(userId)
	resp, _ := config.LectureClient.Attend(ctx, &rpc.AttendRequest{
		RoomId: RoomID,
		UserId: UserID,
		Sdp:    req.Sdp,
	})

	switch resp.Response.Code {
	case rsp.Success:
		c.JSON(consts.StatusOK, resp)
	default:
		c.JSON(consts.StatusBadRequest, resp)
	}
}

// Inroom .
// @router lecture/:roomid/ws [GET]
func Inroom(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.NilResponse
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}
