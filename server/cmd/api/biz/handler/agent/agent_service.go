// Code generated by hertz generator.

package agent

import (
	"context"
	"strconv"

	agent "github.com/Rinai-R/ApexLecture/server/cmd/api/biz/model/agent"
	"github.com/Rinai-R/ApexLecture/server/cmd/api/config"
	rpc "github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/agent"
	"github.com/Rinai-R/ApexLecture/server/shared/rsp"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Ask .
// @router /agent/:roomid/ask [POST]
func Ask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req agent.AskRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter(err.Error()))
		return
	}
	userid, ok := c.Get("userid")
	if !ok {
		c.JSON(consts.StatusBadRequest, rsp.ErrorUnAuthorized("Unknown user"))
		return
	}
	userId := userid.(float64)
	UserId := int64(userId)
	roomid, ok := c.Params.Get("roomid")
	if !ok {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter("roomid is required"))
		return
	}
	RoomId, err := strconv.ParseInt(roomid, 10, 64)
	if err != nil {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter("roomid is invalid"))
		return
	}

	resp, _ := config.AgentClient.Ask(ctx, &rpc.AskRequest{
		UserId:  UserId,
		RoomId:  RoomId,
		Content: req.Content,
	})
	switch resp.Response.Code {
	case rsp.Success:
		c.JSON(consts.StatusOK, resp)
	default:
		c.JSON(consts.StatusBadRequest, resp)
	}
}

// StartSummary .
// @router /agent/:roomid/summary [POST]
// 该接口暂不可用
func StartSummary(ctx context.Context, c *app.RequestContext) {
	var err error
	var req agent.StartSummaryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter(err.Error()))
		return
	}
	roomid, ok := c.Params.Get("roomid")
	if !ok {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter("roomid is required"))
		return
	}
	RoomId, err := strconv.ParseInt(roomid, 10, 64)
	if err != nil {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter("roomid is invalid"))
		return
	}

	resp, _ := config.AgentClient.StartSummary(ctx, &rpc.StartSummaryRequest{
		RoomId: RoomId,
	})

	switch resp.Response.Code {
	case rsp.Success:
		c.JSON(consts.StatusOK, resp)
	default:
		c.JSON(consts.StatusBadRequest, resp)
	}
}

// GetSummary .
// @router /agent/:roomid/summary [GET]
// 该接口暂不可用
func GetSummary(ctx context.Context, c *app.RequestContext) {
	var err error
	var req agent.GetSummaryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	roomid, ok := c.Params.Get("roomid")
	if !ok {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter("roomid is required"))
		return
	}
	RoomId, err := strconv.ParseInt(roomid, 10, 64)
	if err != nil {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter("roomid is invalid"))
		return
	}

	resp, _ := config.AgentClient.GetSummary(ctx, &rpc.GetSummaryRequest{
		RoomId: RoomId,
	})

	switch resp.Response.Code {
	case rsp.Success:
		c.JSON(consts.StatusOK, resp)
	default:
		c.JSON(consts.StatusBadRequest, resp)
	}
}
