// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
	"github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/base"
)

type RegisterRequest struct {
	Username string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewRegisterRequest() *RegisterRequest {
	return &RegisterRequest{}
}

func (p *RegisterRequest) InitDefault() {
}

func (p *RegisterRequest) GetUsername() (v string) {
	return p.Username
}

func (p *RegisterRequest) GetPassword() (v string) {
	return p.Password
}
func (p *RegisterRequest) SetUsername(val string) {
	p.Username = val
}
func (p *RegisterRequest) SetPassword(val string) {
	p.Password = val
}

func (p *RegisterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterRequest(%+v)", *p)
}

var fieldIDToName_RegisterRequest = map[int16]string{
	1: "username",
	2: "password",
}

type RegisterResponse struct {
	Base *base.BaseResponse `thrift:"base,1,required" frugal:"1,required,base.BaseResponse" json:"base"`
	Id   int64              `thrift:"id,2,required" frugal:"2,required,i64" json:"id"`
}

func NewRegisterResponse() *RegisterResponse {
	return &RegisterResponse{}
}

func (p *RegisterResponse) InitDefault() {
}

var RegisterResponse_Base_DEFAULT *base.BaseResponse

func (p *RegisterResponse) GetBase() (v *base.BaseResponse) {
	if !p.IsSetBase() {
		return RegisterResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *RegisterResponse) GetId() (v int64) {
	return p.Id
}
func (p *RegisterResponse) SetBase(val *base.BaseResponse) {
	p.Base = val
}
func (p *RegisterResponse) SetId(val int64) {
	p.Id = val
}

func (p *RegisterResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *RegisterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterResponse(%+v)", *p)
}

var fieldIDToName_RegisterResponse = map[int16]string{
	1: "base",
	2: "id",
}

type LoginRequest struct {
	Username string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewLoginRequest() *LoginRequest {
	return &LoginRequest{}
}

func (p *LoginRequest) InitDefault() {
}

func (p *LoginRequest) GetUsername() (v string) {
	return p.Username
}

func (p *LoginRequest) GetPassword() (v string) {
	return p.Password
}
func (p *LoginRequest) SetUsername(val string) {
	p.Username = val
}
func (p *LoginRequest) SetPassword(val string) {
	p.Password = val
}

func (p *LoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRequest(%+v)", *p)
}

var fieldIDToName_LoginRequest = map[int16]string{
	1: "username",
	2: "password",
}

type LoginResponse struct {
	Base  *base.BaseResponse `thrift:"base,1,required" frugal:"1,required,base.BaseResponse" json:"base"`
	Token string             `thrift:"token,2,required" frugal:"2,required,string" json:"token"`
}

func NewLoginResponse() *LoginResponse {
	return &LoginResponse{}
}

func (p *LoginResponse) InitDefault() {
}

var LoginResponse_Base_DEFAULT *base.BaseResponse

func (p *LoginResponse) GetBase() (v *base.BaseResponse) {
	if !p.IsSetBase() {
		return LoginResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *LoginResponse) GetToken() (v string) {
	return p.Token
}
func (p *LoginResponse) SetBase(val *base.BaseResponse) {
	p.Base = val
}
func (p *LoginResponse) SetToken(val string) {
	p.Token = val
}

func (p *LoginResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResponse(%+v)", *p)
}

var fieldIDToName_LoginResponse = map[int16]string{
	1: "base",
	2: "token",
}

type GetPublicKeyRequest struct {
}

func NewGetPublicKeyRequest() *GetPublicKeyRequest {
	return &GetPublicKeyRequest{}
}

func (p *GetPublicKeyRequest) InitDefault() {
}

func (p *GetPublicKeyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPublicKeyRequest(%+v)", *p)
}

var fieldIDToName_GetPublicKeyRequest = map[int16]string{}

type GetPublicKeyResponse struct {
	PublicKey string `thrift:"publicKey,1,required" frugal:"1,required,string" json:"publicKey"`
}

func NewGetPublicKeyResponse() *GetPublicKeyResponse {
	return &GetPublicKeyResponse{}
}

func (p *GetPublicKeyResponse) InitDefault() {
}

func (p *GetPublicKeyResponse) GetPublicKey() (v string) {
	return p.PublicKey
}
func (p *GetPublicKeyResponse) SetPublicKey(val string) {
	p.PublicKey = val
}

func (p *GetPublicKeyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPublicKeyResponse(%+v)", *p)
}

var fieldIDToName_GetPublicKeyResponse = map[int16]string{
	1: "publicKey",
}

type UserService interface {
	Register(ctx context.Context, request *RegisterRequest) (r *RegisterResponse, err error)

	Login(ctx context.Context, request *LoginRequest) (r *LoginResponse, err error)

	GetPublicKey(ctx context.Context, request *GetPublicKeyRequest) (r *GetPublicKeyResponse, err error)
}

type UserServiceRegisterArgs struct {
	Request *RegisterRequest `thrift:"request,1" frugal:"1,default,RegisterRequest" json:"request"`
}

func NewUserServiceRegisterArgs() *UserServiceRegisterArgs {
	return &UserServiceRegisterArgs{}
}

func (p *UserServiceRegisterArgs) InitDefault() {
}

var UserServiceRegisterArgs_Request_DEFAULT *RegisterRequest

func (p *UserServiceRegisterArgs) GetRequest() (v *RegisterRequest) {
	if !p.IsSetRequest() {
		return UserServiceRegisterArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceRegisterArgs) SetRequest(val *RegisterRequest) {
	p.Request = val
}

func (p *UserServiceRegisterArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterArgs(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterArgs = map[int16]string{
	1: "request",
}

type UserServiceRegisterResult struct {
	Success *RegisterResponse `thrift:"success,0,optional" frugal:"0,optional,RegisterResponse" json:"success,omitempty"`
}

func NewUserServiceRegisterResult() *UserServiceRegisterResult {
	return &UserServiceRegisterResult{}
}

func (p *UserServiceRegisterResult) InitDefault() {
}

var UserServiceRegisterResult_Success_DEFAULT *RegisterResponse

func (p *UserServiceRegisterResult) GetSuccess() (v *RegisterResponse) {
	if !p.IsSetSuccess() {
		return UserServiceRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterResponse)
}

func (p *UserServiceRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterResult(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterResult = map[int16]string{
	0: "success",
}

type UserServiceLoginArgs struct {
	Request *LoginRequest `thrift:"request,1" frugal:"1,default,LoginRequest" json:"request"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
	return &UserServiceLoginArgs{}
}

func (p *UserServiceLoginArgs) InitDefault() {
}

var UserServiceLoginArgs_Request_DEFAULT *LoginRequest

func (p *UserServiceLoginArgs) GetRequest() (v *LoginRequest) {
	if !p.IsSetRequest() {
		return UserServiceLoginArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceLoginArgs) SetRequest(val *LoginRequest) {
	p.Request = val
}

func (p *UserServiceLoginArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

var fieldIDToName_UserServiceLoginArgs = map[int16]string{
	1: "request",
}

type UserServiceLoginResult struct {
	Success *LoginResponse `thrift:"success,0,optional" frugal:"0,optional,LoginResponse" json:"success,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
	return &UserServiceLoginResult{}
}

func (p *UserServiceLoginResult) InitDefault() {
}

var UserServiceLoginResult_Success_DEFAULT *LoginResponse

func (p *UserServiceLoginResult) GetSuccess() (v *LoginResponse) {
	if !p.IsSetSuccess() {
		return UserServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResponse)
}

func (p *UserServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

var fieldIDToName_UserServiceLoginResult = map[int16]string{
	0: "success",
}

type UserServiceGetPublicKeyArgs struct {
	Request *GetPublicKeyRequest `thrift:"request,1" frugal:"1,default,GetPublicKeyRequest" json:"request"`
}

func NewUserServiceGetPublicKeyArgs() *UserServiceGetPublicKeyArgs {
	return &UserServiceGetPublicKeyArgs{}
}

func (p *UserServiceGetPublicKeyArgs) InitDefault() {
}

var UserServiceGetPublicKeyArgs_Request_DEFAULT *GetPublicKeyRequest

func (p *UserServiceGetPublicKeyArgs) GetRequest() (v *GetPublicKeyRequest) {
	if !p.IsSetRequest() {
		return UserServiceGetPublicKeyArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceGetPublicKeyArgs) SetRequest(val *GetPublicKeyRequest) {
	p.Request = val
}

func (p *UserServiceGetPublicKeyArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceGetPublicKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetPublicKeyArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetPublicKeyArgs = map[int16]string{
	1: "request",
}

type UserServiceGetPublicKeyResult struct {
	Success *GetPublicKeyResponse `thrift:"success,0,optional" frugal:"0,optional,GetPublicKeyResponse" json:"success,omitempty"`
}

func NewUserServiceGetPublicKeyResult() *UserServiceGetPublicKeyResult {
	return &UserServiceGetPublicKeyResult{}
}

func (p *UserServiceGetPublicKeyResult) InitDefault() {
}

var UserServiceGetPublicKeyResult_Success_DEFAULT *GetPublicKeyResponse

func (p *UserServiceGetPublicKeyResult) GetSuccess() (v *GetPublicKeyResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetPublicKeyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetPublicKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPublicKeyResponse)
}

func (p *UserServiceGetPublicKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetPublicKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetPublicKeyResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetPublicKeyResult = map[int16]string{
	0: "success",
}
