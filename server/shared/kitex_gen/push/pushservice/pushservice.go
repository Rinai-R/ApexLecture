// Code generated by Kitex v0.13.1. DO NOT EDIT.

package pushservice

import (
	"context"
	"errors"
	push "github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/push"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Receive": kitex.NewMethodInfo(
		receiveHandler,
		newPushServiceReceiveArgs,
		newPushServiceReceiveResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
}

var (
	pushServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return pushServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "PushService"
	handlerType := (*push.PushService)(nil)
	extra := map[string]interface{}{
		"PackageName": "push",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func receiveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, err := streaming.GetServerStreamFromArg(arg)
	if err != nil {
		return err
	}
	stream := streaming.NewServerStreamingServer[push.PushMessageResponse](st)
	req := new(push.PushMessageRequest)
	if err := stream.RecvMsg(ctx, req); err != nil {
		return err
	}
	return handler.(push.PushService).Receive(ctx, req, stream)
}

func newPushServiceReceiveArgs() interface{} {
	return push.NewPushServiceReceiveArgs()
}

func newPushServiceReceiveResult() interface{} {
	return push.NewPushServiceReceiveResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) Receive(ctx context.Context, request *push.PushMessageRequest) (PushService_ReceiveClient, error) {
	st, err := p.sc.StreamX(ctx, "Receive")
	if err != nil {
		return nil, err
	}
	stream := streaming.NewServerStreamingClient[push.PushMessageResponse](st)
	if err := stream.SendMsg(ctx, request); err != nil {
		return nil, err
	}
	if err := stream.CloseSend(ctx); err != nil {
		return nil, err
	}
	return stream, nil
}
