// Code generated by Kitex v0.13.1. DO NOT EDIT.

package lectureservice

import (
	"context"
	"errors"
	lecture "github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/lecture"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"start": kitex.NewMethodInfo(
		startHandler,
		newLectureServiceStartArgs,
		newLectureServiceStartResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"attend": kitex.NewMethodInfo(
		attendHandler,
		newLectureServiceAttendArgs,
		newLectureServiceAttendResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"record": kitex.NewMethodInfo(
		recordHandler,
		newLectureServiceRecordArgs,
		newLectureServiceRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getHistoryLecture": kitex.NewMethodInfo(
		getHistoryLectureHandler,
		newLectureServiceGetHistoryLectureArgs,
		newLectureServiceGetHistoryLectureResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"randomSelect": kitex.NewMethodInfo(
		randomSelectHandler,
		newLectureServiceRandomSelectArgs,
		newLectureServiceRandomSelectResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	lectureServiceServiceInfo                = NewServiceInfo()
	lectureServiceServiceInfoForClient       = NewServiceInfoForClient()
	lectureServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return lectureServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return lectureServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return lectureServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LectureService"
	handlerType := (*lecture.LectureService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "lecture",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func startHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lecture.LectureServiceStartArgs)
	realResult := result.(*lecture.LectureServiceStartResult)
	success, err := handler.(lecture.LectureService).Start(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLectureServiceStartArgs() interface{} {
	return lecture.NewLectureServiceStartArgs()
}

func newLectureServiceStartResult() interface{} {
	return lecture.NewLectureServiceStartResult()
}

func attendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lecture.LectureServiceAttendArgs)
	realResult := result.(*lecture.LectureServiceAttendResult)
	success, err := handler.(lecture.LectureService).Attend(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLectureServiceAttendArgs() interface{} {
	return lecture.NewLectureServiceAttendArgs()
}

func newLectureServiceAttendResult() interface{} {
	return lecture.NewLectureServiceAttendResult()
}

func recordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lecture.LectureServiceRecordArgs)
	realResult := result.(*lecture.LectureServiceRecordResult)
	success, err := handler.(lecture.LectureService).Record(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLectureServiceRecordArgs() interface{} {
	return lecture.NewLectureServiceRecordArgs()
}

func newLectureServiceRecordResult() interface{} {
	return lecture.NewLectureServiceRecordResult()
}

func getHistoryLectureHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lecture.LectureServiceGetHistoryLectureArgs)
	realResult := result.(*lecture.LectureServiceGetHistoryLectureResult)
	success, err := handler.(lecture.LectureService).GetHistoryLecture(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLectureServiceGetHistoryLectureArgs() interface{} {
	return lecture.NewLectureServiceGetHistoryLectureArgs()
}

func newLectureServiceGetHistoryLectureResult() interface{} {
	return lecture.NewLectureServiceGetHistoryLectureResult()
}

func randomSelectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lecture.LectureServiceRandomSelectArgs)
	realResult := result.(*lecture.LectureServiceRandomSelectResult)
	success, err := handler.(lecture.LectureService).RandomSelect(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLectureServiceRandomSelectArgs() interface{} {
	return lecture.NewLectureServiceRandomSelectArgs()
}

func newLectureServiceRandomSelectResult() interface{} {
	return lecture.NewLectureServiceRandomSelectResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Start(ctx context.Context, request *lecture.StartRequest) (r *lecture.StartResponse, err error) {
	var _args lecture.LectureServiceStartArgs
	_args.Request = request
	var _result lecture.LectureServiceStartResult
	if err = p.c.Call(ctx, "start", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Attend(ctx context.Context, request *lecture.AttendRequest) (r *lecture.AttendResponse, err error) {
	var _args lecture.LectureServiceAttendArgs
	_args.Request = request
	var _result lecture.LectureServiceAttendResult
	if err = p.c.Call(ctx, "attend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Record(ctx context.Context, request *lecture.RecordRequest) (r *lecture.RecordResponse, err error) {
	var _args lecture.LectureServiceRecordArgs
	_args.Request = request
	var _result lecture.LectureServiceRecordResult
	if err = p.c.Call(ctx, "record", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHistoryLecture(ctx context.Context, request *lecture.GetHistoryLectureRequest) (r *lecture.GetHistoryLectureResponse, err error) {
	var _args lecture.LectureServiceGetHistoryLectureArgs
	_args.Request = request
	var _result lecture.LectureServiceGetHistoryLectureResult
	if err = p.c.Call(ctx, "getHistoryLecture", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RandomSelect(ctx context.Context, request *lecture.RandomSelectRequest) (r *lecture.RandomSelectResponse, err error) {
	var _args lecture.LectureServiceRandomSelectArgs
	_args.Request = request
	var _result lecture.LectureServiceRandomSelectResult
	if err = p.c.Call(ctx, "randomSelect", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
