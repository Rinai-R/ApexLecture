// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package push

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/cloudwego/kitex/pkg/streaming"
)

type MessageType int64

const (
	MessageType_CHAT MessageType = 1
)

func (p MessageType) String() string {
	switch p {
	case MessageType_CHAT:
		return "CHAT"
	}
	return "<UNSET>"
}

func MessageTypeFromString(s string) (MessageType, error) {
	switch s {
	case "CHAT":
		return MessageType_CHAT, nil
	}
	return MessageType(0), fmt.Errorf("not a valid MessageType string")
}

func MessageTypePtr(v MessageType) *MessageType { return &v }
func (p *MessageType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = MessageType(result.Int64)
	return
}

func (p *MessageType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ChatMessage struct {
	RoomId int64  `thrift:"room_id,1,required" frugal:"1,required,i64" json:"room_id"`
	UserId int64  `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
	Text   string `thrift:"text,3,required" frugal:"3,required,string" json:"text"`
}

func NewChatMessage() *ChatMessage {
	return &ChatMessage{}
}

func (p *ChatMessage) InitDefault() {
}

func (p *ChatMessage) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *ChatMessage) GetUserId() (v int64) {
	return p.UserId
}

func (p *ChatMessage) GetText() (v string) {
	return p.Text
}
func (p *ChatMessage) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *ChatMessage) SetUserId(val int64) {
	p.UserId = val
}
func (p *ChatMessage) SetText(val string) {
	p.Text = val
}

func (p *ChatMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessage(%+v)", *p)
}

var fieldIDToName_ChatMessage = map[int16]string{
	1: "room_id",
	2: "user_id",
	3: "text",
}

type PushMessageResponse struct {
	Type    int8     `thrift:"type,1,required" frugal:"1,required,i8" json:"type"`
	Payload *Payload `thrift:"payload,2,required" frugal:"2,required,Payload" json:"payload"`
}

func NewPushMessageResponse() *PushMessageResponse {
	return &PushMessageResponse{}
}

func (p *PushMessageResponse) InitDefault() {
}

func (p *PushMessageResponse) GetType() (v int8) {
	return p.Type
}

var PushMessageResponse_Payload_DEFAULT *Payload

func (p *PushMessageResponse) GetPayload() (v *Payload) {
	if !p.IsSetPayload() {
		return PushMessageResponse_Payload_DEFAULT
	}
	return p.Payload
}
func (p *PushMessageResponse) SetType(val int8) {
	p.Type = val
}
func (p *PushMessageResponse) SetPayload(val *Payload) {
	p.Payload = val
}

func (p *PushMessageResponse) IsSetPayload() bool {
	return p.Payload != nil
}

func (p *PushMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushMessageResponse(%+v)", *p)
}

var fieldIDToName_PushMessageResponse = map[int16]string{
	1: "type",
	2: "payload",
}

type PushMessageRequest struct {
	RoomId int64 `thrift:"roomId,1,required" frugal:"1,required,i64" json:"roomId"`
	UserId int64 `thrift:"userId,2,required" frugal:"2,required,i64" json:"userId"`
}

func NewPushMessageRequest() *PushMessageRequest {
	return &PushMessageRequest{}
}

func (p *PushMessageRequest) InitDefault() {
}

func (p *PushMessageRequest) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *PushMessageRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *PushMessageRequest) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *PushMessageRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *PushMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushMessageRequest(%+v)", *p)
}

var fieldIDToName_PushMessageRequest = map[int16]string{
	1: "roomId",
	2: "userId",
}

type Payload struct {
	ChatMessage *ChatMessage `thrift:"chat_message,1,optional" frugal:"1,optional,ChatMessage" json:"chat_message,omitempty"`
}

func NewPayload() *Payload {
	return &Payload{}
}

func (p *Payload) InitDefault() {
}

var Payload_ChatMessage_DEFAULT *ChatMessage

func (p *Payload) GetChatMessage() (v *ChatMessage) {
	if !p.IsSetChatMessage() {
		return Payload_ChatMessage_DEFAULT
	}
	return p.ChatMessage
}
func (p *Payload) SetChatMessage(val *ChatMessage) {
	p.ChatMessage = val
}

func (p *Payload) CountSetFieldsPayload() int {
	count := 0
	if p.IsSetChatMessage() {
		count++
	}
	return count
}

func (p *Payload) IsSetChatMessage() bool {
	return p.ChatMessage != nil
}

func (p *Payload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Payload(%+v)", *p)
}

var fieldIDToName_Payload = map[int16]string{
	1: "chat_message",
}

type PushService interface {
	Receive(ctx context.Context, req *PushMessageRequest, stream PushService_ReceiveServer) (err error)
}

type PushServiceReceiveArgs struct {
	Request *PushMessageRequest `thrift:"request,1" frugal:"1,default,PushMessageRequest" json:"request"`
}

func NewPushServiceReceiveArgs() *PushServiceReceiveArgs {
	return &PushServiceReceiveArgs{}
}

func (p *PushServiceReceiveArgs) InitDefault() {
}

var PushServiceReceiveArgs_Request_DEFAULT *PushMessageRequest

func (p *PushServiceReceiveArgs) GetRequest() (v *PushMessageRequest) {
	if !p.IsSetRequest() {
		return PushServiceReceiveArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PushServiceReceiveArgs) SetRequest(val *PushMessageRequest) {
	p.Request = val
}

func (p *PushServiceReceiveArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PushServiceReceiveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushServiceReceiveArgs(%+v)", *p)
}

var fieldIDToName_PushServiceReceiveArgs = map[int16]string{
	1: "request",
}

type PushServiceReceiveResult struct {
	Success *PushMessageResponse `thrift:"success,0,optional" frugal:"0,optional,PushMessageResponse" json:"success,omitempty"`
}

func NewPushServiceReceiveResult() *PushServiceReceiveResult {
	return &PushServiceReceiveResult{}
}

func (p *PushServiceReceiveResult) InitDefault() {
}

var PushServiceReceiveResult_Success_DEFAULT *PushMessageResponse

func (p *PushServiceReceiveResult) GetSuccess() (v *PushMessageResponse) {
	if !p.IsSetSuccess() {
		return PushServiceReceiveResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PushServiceReceiveResult) SetSuccess(x interface{}) {
	p.Success = x.(*PushMessageResponse)
}

func (p *PushServiceReceiveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PushServiceReceiveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushServiceReceiveResult(%+v)", *p)
}

var fieldIDToName_PushServiceReceiveResult = map[int16]string{
	0: "success",
}

type PushService_ReceiveServer streaming.ServerStreamingServer[PushMessageResponse]
