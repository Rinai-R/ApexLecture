// Code generated by Kitex v0.13.1. DO NOT EDIT.

package interactionservice

import (
	"context"
	interaction "github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/interaction"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	streamcall "github.com/cloudwego/kitex/client/callopt/streamcall"
	streamclient "github.com/cloudwego/kitex/client/streamclient"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateRoom(ctx context.Context, request *interaction.CreateRoomRequest, callOptions ...callopt.Option) (r *interaction.CreateRoomResponse, err error)
	SendMessage(ctx context.Context, request *interaction.SendMessageRequest, callOptions ...callopt.Option) (r *interaction.SendMessageResponse, err error)
	CreateQuestion(ctx context.Context, request *interaction.CreateQuestionRequest, callOptions ...callopt.Option) (r *interaction.CreateQuestionResponse, err error)
	SubmitAnswer(ctx context.Context, request *interaction.SubmitAnswerRequest, callOptions ...callopt.Option) (r *interaction.SubmitAnswerResponse, err error)
}

// StreamClient is designed to provide Interface for Streaming APIs.
type StreamClient interface {
	Receive(ctx context.Context, request *interaction.ReceiveRequest, callOptions ...streamcall.Option) (stream InteractionService_receiveClient, err error)
}

type InteractionService_receiveClient interface {
	streaming.Stream
	Recv() (*interaction.ReceiveResponse, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kInteractionServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInteractionServiceClient struct {
	*kClient
}

func (p *kInteractionServiceClient) CreateRoom(ctx context.Context, request *interaction.CreateRoomRequest, callOptions ...callopt.Option) (r *interaction.CreateRoomResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateRoom(ctx, request)
}

func (p *kInteractionServiceClient) SendMessage(ctx context.Context, request *interaction.SendMessageRequest, callOptions ...callopt.Option) (r *interaction.SendMessageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendMessage(ctx, request)
}

func (p *kInteractionServiceClient) CreateQuestion(ctx context.Context, request *interaction.CreateQuestionRequest, callOptions ...callopt.Option) (r *interaction.CreateQuestionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateQuestion(ctx, request)
}

func (p *kInteractionServiceClient) SubmitAnswer(ctx context.Context, request *interaction.SubmitAnswerRequest, callOptions ...callopt.Option) (r *interaction.SubmitAnswerResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SubmitAnswer(ctx, request)
}

// NewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
func NewStreamClient(destService string, opts ...streamclient.Option) (StreamClient, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))
	options = append(options, client.WithTransportProtocol(transport.GRPC))
	options = append(options, streamclient.GetClientOptions(opts)...)

	kc, err := client.NewClient(serviceInfoForStreamClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kInteractionServiceStreamClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
// It panics if any error occurs.
func MustNewStreamClient(destService string, opts ...streamclient.Option) StreamClient {
	kc, err := NewStreamClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInteractionServiceStreamClient struct {
	*kClient
}

func (p *kInteractionServiceStreamClient) Receive(ctx context.Context, request *interaction.ReceiveRequest, callOptions ...streamcall.Option) (stream InteractionService_receiveClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.Receive(ctx, request)
}
