// Code generated by Kitex v0.13.1. DO NOT EDIT.

package lectureservice

import (
	"context"
	lecture "github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/lecture"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Start(ctx context.Context, request *lecture.StartRequest, callOptions ...callopt.Option) (r *lecture.StartResponse, err error)
	Attend(ctx context.Context, request *lecture.AttendRequest, callOptions ...callopt.Option) (r *lecture.AttendResponse, err error)
	Record(ctx context.Context, request *lecture.RecordRequest, callOptions ...callopt.Option) (r *lecture.RecordResponse, err error)
	GetHistoryLecture(ctx context.Context, request *lecture.GetHistoryLectureRequest, callOptions ...callopt.Option) (r *lecture.GetHistoryLectureResponse, err error)
	RandomSelect(ctx context.Context, request *lecture.RandomSelectRequest, callOptions ...callopt.Option) (r *lecture.RandomSelectResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kLectureServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kLectureServiceClient struct {
	*kClient
}

func (p *kLectureServiceClient) Start(ctx context.Context, request *lecture.StartRequest, callOptions ...callopt.Option) (r *lecture.StartResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Start(ctx, request)
}

func (p *kLectureServiceClient) Attend(ctx context.Context, request *lecture.AttendRequest, callOptions ...callopt.Option) (r *lecture.AttendResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Attend(ctx, request)
}

func (p *kLectureServiceClient) Record(ctx context.Context, request *lecture.RecordRequest, callOptions ...callopt.Option) (r *lecture.RecordResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Record(ctx, request)
}

func (p *kLectureServiceClient) GetHistoryLecture(ctx context.Context, request *lecture.GetHistoryLectureRequest, callOptions ...callopt.Option) (r *lecture.GetHistoryLectureResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetHistoryLecture(ctx, request)
}

func (p *kLectureServiceClient) RandomSelect(ctx context.Context, request *lecture.RandomSelectRequest, callOptions ...callopt.Option) (r *lecture.RandomSelectResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RandomSelect(ctx, request)
}
