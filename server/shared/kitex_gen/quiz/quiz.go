// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package quiz

import (
	"context"
	"fmt"
	"github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/base"
)

type SubmitQuestionRequest struct {
	RoomId  int64    `thrift:"roomId,1,required" frugal:"1,required,i64" json:"roomId"`
	UserId  int64    `thrift:"userId,2,required" frugal:"2,required,i64" json:"userId"`
	Type    int8     `thrift:"type,3,required" frugal:"3,required,i8" json:"type"`
	Payload *Payload `thrift:"Payload,4,required" frugal:"4,required,Payload" json:"Payload"`
}

func NewSubmitQuestionRequest() *SubmitQuestionRequest {
	return &SubmitQuestionRequest{}
}

func (p *SubmitQuestionRequest) InitDefault() {
}

func (p *SubmitQuestionRequest) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *SubmitQuestionRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *SubmitQuestionRequest) GetType() (v int8) {
	return p.Type
}

var SubmitQuestionRequest_Payload_DEFAULT *Payload

func (p *SubmitQuestionRequest) GetPayload() (v *Payload) {
	if !p.IsSetPayload() {
		return SubmitQuestionRequest_Payload_DEFAULT
	}
	return p.Payload
}
func (p *SubmitQuestionRequest) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *SubmitQuestionRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *SubmitQuestionRequest) SetType(val int8) {
	p.Type = val
}
func (p *SubmitQuestionRequest) SetPayload(val *Payload) {
	p.Payload = val
}

func (p *SubmitQuestionRequest) IsSetPayload() bool {
	return p.Payload != nil
}

func (p *SubmitQuestionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitQuestionRequest(%+v)", *p)
}

var fieldIDToName_SubmitQuestionRequest = map[int16]string{
	1: "roomId",
	2: "userId",
	3: "type",
	4: "Payload",
}

type Choice struct {
	Title   string   `thrift:"title,1,required" frugal:"1,required,string" json:"title"`
	Options []string `thrift:"options,2,required" frugal:"2,required,list<string>" json:"options"`
	Answers []int8   `thrift:"answers,3,required" frugal:"3,required,list<i8>" json:"answers"`
}

func NewChoice() *Choice {
	return &Choice{}
}

func (p *Choice) InitDefault() {
}

func (p *Choice) GetTitle() (v string) {
	return p.Title
}

func (p *Choice) GetOptions() (v []string) {
	return p.Options
}

func (p *Choice) GetAnswers() (v []int8) {
	return p.Answers
}
func (p *Choice) SetTitle(val string) {
	p.Title = val
}
func (p *Choice) SetOptions(val []string) {
	p.Options = val
}
func (p *Choice) SetAnswers(val []int8) {
	p.Answers = val
}

func (p *Choice) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Choice(%+v)", *p)
}

var fieldIDToName_Choice = map[int16]string{
	1: "title",
	2: "options",
	3: "answers",
}

type Judge struct {
	Title  string `thrift:"title,1,required" frugal:"1,required,string" json:"title"`
	Answer bool   `thrift:"answer,2,required" frugal:"2,required,bool" json:"answer"`
}

func NewJudge() *Judge {
	return &Judge{}
}

func (p *Judge) InitDefault() {
}

func (p *Judge) GetTitle() (v string) {
	return p.Title
}

func (p *Judge) GetAnswer() (v bool) {
	return p.Answer
}
func (p *Judge) SetTitle(val string) {
	p.Title = val
}
func (p *Judge) SetAnswer(val bool) {
	p.Answer = val
}

func (p *Judge) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Judge(%+v)", *p)
}

var fieldIDToName_Judge = map[int16]string{
	1: "title",
	2: "answer",
}

type SubmitQuestionResponse struct {
	Response *base.BaseResponse `thrift:"response,1,required" frugal:"1,required,base.BaseResponse" json:"response"`
}

func NewSubmitQuestionResponse() *SubmitQuestionResponse {
	return &SubmitQuestionResponse{}
}

func (p *SubmitQuestionResponse) InitDefault() {
}

var SubmitQuestionResponse_Response_DEFAULT *base.BaseResponse

func (p *SubmitQuestionResponse) GetResponse() (v *base.BaseResponse) {
	if !p.IsSetResponse() {
		return SubmitQuestionResponse_Response_DEFAULT
	}
	return p.Response
}
func (p *SubmitQuestionResponse) SetResponse(val *base.BaseResponse) {
	p.Response = val
}

func (p *SubmitQuestionResponse) IsSetResponse() bool {
	return p.Response != nil
}

func (p *SubmitQuestionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitQuestionResponse(%+v)", *p)
}

var fieldIDToName_SubmitQuestionResponse = map[int16]string{
	1: "response",
}

type SubmitAnswerRequest struct {
	RoomId     int64          `thrift:"roomId,1,required" frugal:"1,required,i64" json:"roomId"`
	UserId     int64          `thrift:"userId,2,required" frugal:"2,required,i64" json:"userId"`
	QuestionId int64          `thrift:"questionId,3,required" frugal:"3,required,i64" json:"questionId"`
	Type       int8           `thrift:"type,4,required" frugal:"4,required,i8" json:"type"`
	Payload    *AnswerPayload `thrift:"payload,5,required" frugal:"5,required,AnswerPayload" json:"payload"`
}

func NewSubmitAnswerRequest() *SubmitAnswerRequest {
	return &SubmitAnswerRequest{}
}

func (p *SubmitAnswerRequest) InitDefault() {
}

func (p *SubmitAnswerRequest) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *SubmitAnswerRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *SubmitAnswerRequest) GetQuestionId() (v int64) {
	return p.QuestionId
}

func (p *SubmitAnswerRequest) GetType() (v int8) {
	return p.Type
}

var SubmitAnswerRequest_Payload_DEFAULT *AnswerPayload

func (p *SubmitAnswerRequest) GetPayload() (v *AnswerPayload) {
	if !p.IsSetPayload() {
		return SubmitAnswerRequest_Payload_DEFAULT
	}
	return p.Payload
}
func (p *SubmitAnswerRequest) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *SubmitAnswerRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *SubmitAnswerRequest) SetQuestionId(val int64) {
	p.QuestionId = val
}
func (p *SubmitAnswerRequest) SetType(val int8) {
	p.Type = val
}
func (p *SubmitAnswerRequest) SetPayload(val *AnswerPayload) {
	p.Payload = val
}

func (p *SubmitAnswerRequest) IsSetPayload() bool {
	return p.Payload != nil
}

func (p *SubmitAnswerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitAnswerRequest(%+v)", *p)
}

var fieldIDToName_SubmitAnswerRequest = map[int16]string{
	1: "roomId",
	2: "userId",
	3: "questionId",
	4: "type",
	5: "payload",
}

type ChoiceAnswer struct {
	Answer []int8 `thrift:"answer,1,required" frugal:"1,required,list<i8>" json:"answer"`
}

func NewChoiceAnswer() *ChoiceAnswer {
	return &ChoiceAnswer{}
}

func (p *ChoiceAnswer) InitDefault() {
}

func (p *ChoiceAnswer) GetAnswer() (v []int8) {
	return p.Answer
}
func (p *ChoiceAnswer) SetAnswer(val []int8) {
	p.Answer = val
}

func (p *ChoiceAnswer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChoiceAnswer(%+v)", *p)
}

var fieldIDToName_ChoiceAnswer = map[int16]string{
	1: "answer",
}

type JudgeAnswer struct {
	Answer bool `thrift:"answer,1,required" frugal:"1,required,bool" json:"answer"`
}

func NewJudgeAnswer() *JudgeAnswer {
	return &JudgeAnswer{}
}

func (p *JudgeAnswer) InitDefault() {
}

func (p *JudgeAnswer) GetAnswer() (v bool) {
	return p.Answer
}
func (p *JudgeAnswer) SetAnswer(val bool) {
	p.Answer = val
}

func (p *JudgeAnswer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JudgeAnswer(%+v)", *p)
}

var fieldIDToName_JudgeAnswer = map[int16]string{
	1: "answer",
}

type SubmitAnswerResponse struct {
	Response  *base.BaseResponse `thrift:"response,1,required" frugal:"1,required,base.BaseResponse" json:"response"`
	IsCorrect bool               `thrift:"isCorrect,2,required" frugal:"2,required,bool" json:"isCorrect"`
	Payload   *AnswerPayload     `thrift:"payload,3,optional" frugal:"3,optional,AnswerPayload" json:"payload,omitempty"`
}

func NewSubmitAnswerResponse() *SubmitAnswerResponse {
	return &SubmitAnswerResponse{}
}

func (p *SubmitAnswerResponse) InitDefault() {
}

var SubmitAnswerResponse_Response_DEFAULT *base.BaseResponse

func (p *SubmitAnswerResponse) GetResponse() (v *base.BaseResponse) {
	if !p.IsSetResponse() {
		return SubmitAnswerResponse_Response_DEFAULT
	}
	return p.Response
}

func (p *SubmitAnswerResponse) GetIsCorrect() (v bool) {
	return p.IsCorrect
}

var SubmitAnswerResponse_Payload_DEFAULT *AnswerPayload

func (p *SubmitAnswerResponse) GetPayload() (v *AnswerPayload) {
	if !p.IsSetPayload() {
		return SubmitAnswerResponse_Payload_DEFAULT
	}
	return p.Payload
}
func (p *SubmitAnswerResponse) SetResponse(val *base.BaseResponse) {
	p.Response = val
}
func (p *SubmitAnswerResponse) SetIsCorrect(val bool) {
	p.IsCorrect = val
}
func (p *SubmitAnswerResponse) SetPayload(val *AnswerPayload) {
	p.Payload = val
}

func (p *SubmitAnswerResponse) IsSetResponse() bool {
	return p.Response != nil
}

func (p *SubmitAnswerResponse) IsSetPayload() bool {
	return p.Payload != nil
}

func (p *SubmitAnswerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitAnswerResponse(%+v)", *p)
}

var fieldIDToName_SubmitAnswerResponse = map[int16]string{
	1: "response",
	2: "isCorrect",
	3: "payload",
}

type Payload struct {
	Choice *Choice `thrift:"choice,1,optional" frugal:"1,optional,Choice" json:"choice,omitempty"`
	Judge  *Judge  `thrift:"judge,2,optional" frugal:"2,optional,Judge" json:"judge,omitempty"`
}

func NewPayload() *Payload {
	return &Payload{}
}

func (p *Payload) InitDefault() {
}

var Payload_Choice_DEFAULT *Choice

func (p *Payload) GetChoice() (v *Choice) {
	if !p.IsSetChoice() {
		return Payload_Choice_DEFAULT
	}
	return p.Choice
}

var Payload_Judge_DEFAULT *Judge

func (p *Payload) GetJudge() (v *Judge) {
	if !p.IsSetJudge() {
		return Payload_Judge_DEFAULT
	}
	return p.Judge
}
func (p *Payload) SetChoice(val *Choice) {
	p.Choice = val
}
func (p *Payload) SetJudge(val *Judge) {
	p.Judge = val
}

func (p *Payload) CountSetFieldsPayload() int {
	count := 0
	if p.IsSetChoice() {
		count++
	}
	if p.IsSetJudge() {
		count++
	}
	return count
}

func (p *Payload) IsSetChoice() bool {
	return p.Choice != nil
}

func (p *Payload) IsSetJudge() bool {
	return p.Judge != nil
}

func (p *Payload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Payload(%+v)", *p)
}

var fieldIDToName_Payload = map[int16]string{
	1: "choice",
	2: "judge",
}

type AnswerPayload struct {
	Choice *ChoiceAnswer `thrift:"choice,1,optional" frugal:"1,optional,ChoiceAnswer" json:"choice,omitempty"`
	Judge  *JudgeAnswer  `thrift:"judge,2,optional" frugal:"2,optional,JudgeAnswer" json:"judge,omitempty"`
}

func NewAnswerPayload() *AnswerPayload {
	return &AnswerPayload{}
}

func (p *AnswerPayload) InitDefault() {
}

var AnswerPayload_Choice_DEFAULT *ChoiceAnswer

func (p *AnswerPayload) GetChoice() (v *ChoiceAnswer) {
	if !p.IsSetChoice() {
		return AnswerPayload_Choice_DEFAULT
	}
	return p.Choice
}

var AnswerPayload_Judge_DEFAULT *JudgeAnswer

func (p *AnswerPayload) GetJudge() (v *JudgeAnswer) {
	if !p.IsSetJudge() {
		return AnswerPayload_Judge_DEFAULT
	}
	return p.Judge
}
func (p *AnswerPayload) SetChoice(val *ChoiceAnswer) {
	p.Choice = val
}
func (p *AnswerPayload) SetJudge(val *JudgeAnswer) {
	p.Judge = val
}

func (p *AnswerPayload) CountSetFieldsAnswerPayload() int {
	count := 0
	if p.IsSetChoice() {
		count++
	}
	if p.IsSetJudge() {
		count++
	}
	return count
}

func (p *AnswerPayload) IsSetChoice() bool {
	return p.Choice != nil
}

func (p *AnswerPayload) IsSetJudge() bool {
	return p.Judge != nil
}

func (p *AnswerPayload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnswerPayload(%+v)", *p)
}

var fieldIDToName_AnswerPayload = map[int16]string{
	1: "choice",
	2: "judge",
}

type QuizService interface {
	SubmitQuestion(ctx context.Context, request *SubmitQuestionRequest) (r *SubmitQuestionResponse, err error)

	SubmitAnswer(ctx context.Context, request *SubmitAnswerRequest) (r *SubmitAnswerResponse, err error)
}

type QuizServiceSubmitQuestionArgs struct {
	Request *SubmitQuestionRequest `thrift:"request,1" frugal:"1,default,SubmitQuestionRequest" json:"request"`
}

func NewQuizServiceSubmitQuestionArgs() *QuizServiceSubmitQuestionArgs {
	return &QuizServiceSubmitQuestionArgs{}
}

func (p *QuizServiceSubmitQuestionArgs) InitDefault() {
}

var QuizServiceSubmitQuestionArgs_Request_DEFAULT *SubmitQuestionRequest

func (p *QuizServiceSubmitQuestionArgs) GetRequest() (v *SubmitQuestionRequest) {
	if !p.IsSetRequest() {
		return QuizServiceSubmitQuestionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QuizServiceSubmitQuestionArgs) SetRequest(val *SubmitQuestionRequest) {
	p.Request = val
}

func (p *QuizServiceSubmitQuestionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QuizServiceSubmitQuestionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuizServiceSubmitQuestionArgs(%+v)", *p)
}

var fieldIDToName_QuizServiceSubmitQuestionArgs = map[int16]string{
	1: "request",
}

type QuizServiceSubmitQuestionResult struct {
	Success *SubmitQuestionResponse `thrift:"success,0,optional" frugal:"0,optional,SubmitQuestionResponse" json:"success,omitempty"`
}

func NewQuizServiceSubmitQuestionResult() *QuizServiceSubmitQuestionResult {
	return &QuizServiceSubmitQuestionResult{}
}

func (p *QuizServiceSubmitQuestionResult) InitDefault() {
}

var QuizServiceSubmitQuestionResult_Success_DEFAULT *SubmitQuestionResponse

func (p *QuizServiceSubmitQuestionResult) GetSuccess() (v *SubmitQuestionResponse) {
	if !p.IsSetSuccess() {
		return QuizServiceSubmitQuestionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *QuizServiceSubmitQuestionResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubmitQuestionResponse)
}

func (p *QuizServiceSubmitQuestionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QuizServiceSubmitQuestionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuizServiceSubmitQuestionResult(%+v)", *p)
}

var fieldIDToName_QuizServiceSubmitQuestionResult = map[int16]string{
	0: "success",
}

type QuizServiceSubmitAnswerArgs struct {
	Request *SubmitAnswerRequest `thrift:"request,1" frugal:"1,default,SubmitAnswerRequest" json:"request"`
}

func NewQuizServiceSubmitAnswerArgs() *QuizServiceSubmitAnswerArgs {
	return &QuizServiceSubmitAnswerArgs{}
}

func (p *QuizServiceSubmitAnswerArgs) InitDefault() {
}

var QuizServiceSubmitAnswerArgs_Request_DEFAULT *SubmitAnswerRequest

func (p *QuizServiceSubmitAnswerArgs) GetRequest() (v *SubmitAnswerRequest) {
	if !p.IsSetRequest() {
		return QuizServiceSubmitAnswerArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QuizServiceSubmitAnswerArgs) SetRequest(val *SubmitAnswerRequest) {
	p.Request = val
}

func (p *QuizServiceSubmitAnswerArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QuizServiceSubmitAnswerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuizServiceSubmitAnswerArgs(%+v)", *p)
}

var fieldIDToName_QuizServiceSubmitAnswerArgs = map[int16]string{
	1: "request",
}

type QuizServiceSubmitAnswerResult struct {
	Success *SubmitAnswerResponse `thrift:"success,0,optional" frugal:"0,optional,SubmitAnswerResponse" json:"success,omitempty"`
}

func NewQuizServiceSubmitAnswerResult() *QuizServiceSubmitAnswerResult {
	return &QuizServiceSubmitAnswerResult{}
}

func (p *QuizServiceSubmitAnswerResult) InitDefault() {
}

var QuizServiceSubmitAnswerResult_Success_DEFAULT *SubmitAnswerResponse

func (p *QuizServiceSubmitAnswerResult) GetSuccess() (v *SubmitAnswerResponse) {
	if !p.IsSetSuccess() {
		return QuizServiceSubmitAnswerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *QuizServiceSubmitAnswerResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubmitAnswerResponse)
}

func (p *QuizServiceSubmitAnswerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QuizServiceSubmitAnswerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuizServiceSubmitAnswerResult(%+v)", *p)
}

var fieldIDToName_QuizServiceSubmitAnswerResult = map[int16]string{
	0: "success",
}
