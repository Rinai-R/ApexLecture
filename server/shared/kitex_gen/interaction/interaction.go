// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package interaction

import (
	"context"
	"fmt"
	"github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/base"
	"github.com/cloudwego/kitex/pkg/streaming"
)

type CreateRoomRequest struct {
	TeacherId int64 `thrift:"teacher_id,1,required" frugal:"1,required,i64" json:"teacher_id"`
	RoomId    int64 `thrift:"room_id,2,required" frugal:"2,required,i64" json:"room_id"`
}

func NewCreateRoomRequest() *CreateRoomRequest {
	return &CreateRoomRequest{}
}

func (p *CreateRoomRequest) InitDefault() {
}

func (p *CreateRoomRequest) GetTeacherId() (v int64) {
	return p.TeacherId
}

func (p *CreateRoomRequest) GetRoomId() (v int64) {
	return p.RoomId
}
func (p *CreateRoomRequest) SetTeacherId(val int64) {
	p.TeacherId = val
}
func (p *CreateRoomRequest) SetRoomId(val int64) {
	p.RoomId = val
}

func (p *CreateRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoomRequest(%+v)", *p)
}

var fieldIDToName_CreateRoomRequest = map[int16]string{
	1: "teacher_id",
	2: "room_id",
}

type CreateRoomResponse struct {
	Response *base.BaseResponse `thrift:"response,1" frugal:"1,default,base.BaseResponse" json:"response"`
}

func NewCreateRoomResponse() *CreateRoomResponse {
	return &CreateRoomResponse{}
}

func (p *CreateRoomResponse) InitDefault() {
}

var CreateRoomResponse_Response_DEFAULT *base.BaseResponse

func (p *CreateRoomResponse) GetResponse() (v *base.BaseResponse) {
	if !p.IsSetResponse() {
		return CreateRoomResponse_Response_DEFAULT
	}
	return p.Response
}
func (p *CreateRoomResponse) SetResponse(val *base.BaseResponse) {
	p.Response = val
}

func (p *CreateRoomResponse) IsSetResponse() bool {
	return p.Response != nil
}

func (p *CreateRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoomResponse(%+v)", *p)
}

var fieldIDToName_CreateRoomResponse = map[int16]string{
	1: "response",
}

type SendMessageRequest struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
	UserId  int64  `thrift:"userId,2" frugal:"2,default,i64" json:"userId"`
	RoomId  int64  `thrift:"roomId,3" frugal:"3,default,i64" json:"roomId"`
}

func NewSendMessageRequest() *SendMessageRequest {
	return &SendMessageRequest{}
}

func (p *SendMessageRequest) InitDefault() {
}

func (p *SendMessageRequest) GetMessage() (v string) {
	return p.Message
}

func (p *SendMessageRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *SendMessageRequest) GetRoomId() (v int64) {
	return p.RoomId
}
func (p *SendMessageRequest) SetMessage(val string) {
	p.Message = val
}
func (p *SendMessageRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *SendMessageRequest) SetRoomId(val int64) {
	p.RoomId = val
}

func (p *SendMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageRequest(%+v)", *p)
}

var fieldIDToName_SendMessageRequest = map[int16]string{
	1: "message",
	2: "userId",
	3: "roomId",
}

type SendMessageResponse struct {
	Response *base.BaseResponse `thrift:"response,1" frugal:"1,default,base.BaseResponse" json:"response"`
}

func NewSendMessageResponse() *SendMessageResponse {
	return &SendMessageResponse{}
}

func (p *SendMessageResponse) InitDefault() {
}

var SendMessageResponse_Response_DEFAULT *base.BaseResponse

func (p *SendMessageResponse) GetResponse() (v *base.BaseResponse) {
	if !p.IsSetResponse() {
		return SendMessageResponse_Response_DEFAULT
	}
	return p.Response
}
func (p *SendMessageResponse) SetResponse(val *base.BaseResponse) {
	p.Response = val
}

func (p *SendMessageResponse) IsSetResponse() bool {
	return p.Response != nil
}

func (p *SendMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageResponse(%+v)", *p)
}

var fieldIDToName_SendMessageResponse = map[int16]string{
	1: "response",
}

type CreateQuestionRequest struct {
	RoomId    int64            `thrift:"room_id,1,required" frugal:"1,required,i64" json:"room_id"`
	TeacherId int64            `thrift:"teacher_id,2,required" frugal:"2,required,i64" json:"teacher_id"`
	Type      string           `thrift:"type,3,required" frugal:"3,required,string" json:"type"`
	Title     string           `thrift:"title,4,required" frugal:"4,required,string" json:"title"`
	Score     int32            `thrift:"score,5,required" frugal:"5,required,i32" json:"score"`
	Content   *QuestionContent `thrift:"content,6,required" frugal:"6,required,QuestionContent" json:"content"`
}

func NewCreateQuestionRequest() *CreateQuestionRequest {
	return &CreateQuestionRequest{}
}

func (p *CreateQuestionRequest) InitDefault() {
}

func (p *CreateQuestionRequest) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *CreateQuestionRequest) GetTeacherId() (v int64) {
	return p.TeacherId
}

func (p *CreateQuestionRequest) GetType() (v string) {
	return p.Type
}

func (p *CreateQuestionRequest) GetTitle() (v string) {
	return p.Title
}

func (p *CreateQuestionRequest) GetScore() (v int32) {
	return p.Score
}

var CreateQuestionRequest_Content_DEFAULT *QuestionContent

func (p *CreateQuestionRequest) GetContent() (v *QuestionContent) {
	if !p.IsSetContent() {
		return CreateQuestionRequest_Content_DEFAULT
	}
	return p.Content
}
func (p *CreateQuestionRequest) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *CreateQuestionRequest) SetTeacherId(val int64) {
	p.TeacherId = val
}
func (p *CreateQuestionRequest) SetType(val string) {
	p.Type = val
}
func (p *CreateQuestionRequest) SetTitle(val string) {
	p.Title = val
}
func (p *CreateQuestionRequest) SetScore(val int32) {
	p.Score = val
}
func (p *CreateQuestionRequest) SetContent(val *QuestionContent) {
	p.Content = val
}

func (p *CreateQuestionRequest) IsSetContent() bool {
	return p.Content != nil
}

func (p *CreateQuestionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateQuestionRequest(%+v)", *p)
}

var fieldIDToName_CreateQuestionRequest = map[int16]string{
	1: "room_id",
	2: "teacher_id",
	3: "type",
	4: "title",
	5: "score",
	6: "content",
}

type CreateQuestionResponse struct {
	Response *base.BaseResponse `thrift:"response,1" frugal:"1,default,base.BaseResponse" json:"response"`
}

func NewCreateQuestionResponse() *CreateQuestionResponse {
	return &CreateQuestionResponse{}
}

func (p *CreateQuestionResponse) InitDefault() {
}

var CreateQuestionResponse_Response_DEFAULT *base.BaseResponse

func (p *CreateQuestionResponse) GetResponse() (v *base.BaseResponse) {
	if !p.IsSetResponse() {
		return CreateQuestionResponse_Response_DEFAULT
	}
	return p.Response
}
func (p *CreateQuestionResponse) SetResponse(val *base.BaseResponse) {
	p.Response = val
}

func (p *CreateQuestionResponse) IsSetResponse() bool {
	return p.Response != nil
}

func (p *CreateQuestionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateQuestionResponse(%+v)", *p)
}

var fieldIDToName_CreateQuestionResponse = map[int16]string{
	1: "response",
}

type QuestionContent struct {
	ChoiceQuestion    *ChoiceQuestion    `thrift:"choice_question,1,optional" frugal:"1,optional,ChoiceQuestion" json:"choice_question,omitempty"`
	TrueFalseQuestion *TrueFalseQuestion `thrift:"true_false_question,2,optional" frugal:"2,optional,TrueFalseQuestion" json:"true_false_question,omitempty"`
	TextQuestion      *TextQuestion      `thrift:"text_question,3,optional" frugal:"3,optional,TextQuestion" json:"text_question,omitempty"`
}

func NewQuestionContent() *QuestionContent {
	return &QuestionContent{}
}

func (p *QuestionContent) InitDefault() {
}

var QuestionContent_ChoiceQuestion_DEFAULT *ChoiceQuestion

func (p *QuestionContent) GetChoiceQuestion() (v *ChoiceQuestion) {
	if !p.IsSetChoiceQuestion() {
		return QuestionContent_ChoiceQuestion_DEFAULT
	}
	return p.ChoiceQuestion
}

var QuestionContent_TrueFalseQuestion_DEFAULT *TrueFalseQuestion

func (p *QuestionContent) GetTrueFalseQuestion() (v *TrueFalseQuestion) {
	if !p.IsSetTrueFalseQuestion() {
		return QuestionContent_TrueFalseQuestion_DEFAULT
	}
	return p.TrueFalseQuestion
}

var QuestionContent_TextQuestion_DEFAULT *TextQuestion

func (p *QuestionContent) GetTextQuestion() (v *TextQuestion) {
	if !p.IsSetTextQuestion() {
		return QuestionContent_TextQuestion_DEFAULT
	}
	return p.TextQuestion
}
func (p *QuestionContent) SetChoiceQuestion(val *ChoiceQuestion) {
	p.ChoiceQuestion = val
}
func (p *QuestionContent) SetTrueFalseQuestion(val *TrueFalseQuestion) {
	p.TrueFalseQuestion = val
}
func (p *QuestionContent) SetTextQuestion(val *TextQuestion) {
	p.TextQuestion = val
}

func (p *QuestionContent) IsSetChoiceQuestion() bool {
	return p.ChoiceQuestion != nil
}

func (p *QuestionContent) IsSetTrueFalseQuestion() bool {
	return p.TrueFalseQuestion != nil
}

func (p *QuestionContent) IsSetTextQuestion() bool {
	return p.TextQuestion != nil
}

func (p *QuestionContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuestionContent(%+v)", *p)
}

var fieldIDToName_QuestionContent = map[int16]string{
	1: "choice_question",
	2: "true_false_question",
	3: "text_question",
}

type ChoiceQuestion struct {
	Options   []*Option `thrift:"options,1,required" frugal:"1,required,list<Option>" json:"options"`
	CorrectId string    `thrift:"correct_id,2,required" frugal:"2,required,string" json:"correct_id"`
}

func NewChoiceQuestion() *ChoiceQuestion {
	return &ChoiceQuestion{}
}

func (p *ChoiceQuestion) InitDefault() {
}

func (p *ChoiceQuestion) GetOptions() (v []*Option) {
	return p.Options
}

func (p *ChoiceQuestion) GetCorrectId() (v string) {
	return p.CorrectId
}
func (p *ChoiceQuestion) SetOptions(val []*Option) {
	p.Options = val
}
func (p *ChoiceQuestion) SetCorrectId(val string) {
	p.CorrectId = val
}

func (p *ChoiceQuestion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChoiceQuestion(%+v)", *p)
}

var fieldIDToName_ChoiceQuestion = map[int16]string{
	1: "options",
	2: "correct_id",
}

type Option struct {
	Id      string `thrift:"id,1,required" frugal:"1,required,string" json:"id"`
	Content string `thrift:"content,2,required" frugal:"2,required,string" json:"content"`
}

func NewOption() *Option {
	return &Option{}
}

func (p *Option) InitDefault() {
}

func (p *Option) GetId() (v string) {
	return p.Id
}

func (p *Option) GetContent() (v string) {
	return p.Content
}
func (p *Option) SetId(val string) {
	p.Id = val
}
func (p *Option) SetContent(val string) {
	p.Content = val
}

func (p *Option) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Option(%+v)", *p)
}

var fieldIDToName_Option = map[int16]string{
	1: "id",
	2: "content",
}

type TrueFalseQuestion struct {
	Answer bool `thrift:"answer,1,required" frugal:"1,required,bool" json:"answer"`
}

func NewTrueFalseQuestion() *TrueFalseQuestion {
	return &TrueFalseQuestion{}
}

func (p *TrueFalseQuestion) InitDefault() {
}

func (p *TrueFalseQuestion) GetAnswer() (v bool) {
	return p.Answer
}
func (p *TrueFalseQuestion) SetAnswer(val bool) {
	p.Answer = val
}

func (p *TrueFalseQuestion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrueFalseQuestion(%+v)", *p)
}

var fieldIDToName_TrueFalseQuestion = map[int16]string{
	1: "answer",
}

type TextQuestion struct {
	ReferenceAnswer string   `thrift:"reference_answer,1,required" frugal:"1,required,string" json:"reference_answer"`
	Keywords        []string `thrift:"keywords,2,optional" frugal:"2,optional,list<string>" json:"keywords,omitempty"`
}

func NewTextQuestion() *TextQuestion {
	return &TextQuestion{}
}

func (p *TextQuestion) InitDefault() {
}

func (p *TextQuestion) GetReferenceAnswer() (v string) {
	return p.ReferenceAnswer
}

var TextQuestion_Keywords_DEFAULT []string

func (p *TextQuestion) GetKeywords() (v []string) {
	if !p.IsSetKeywords() {
		return TextQuestion_Keywords_DEFAULT
	}
	return p.Keywords
}
func (p *TextQuestion) SetReferenceAnswer(val string) {
	p.ReferenceAnswer = val
}
func (p *TextQuestion) SetKeywords(val []string) {
	p.Keywords = val
}

func (p *TextQuestion) IsSetKeywords() bool {
	return p.Keywords != nil
}

func (p *TextQuestion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TextQuestion(%+v)", *p)
}

var fieldIDToName_TextQuestion = map[int16]string{
	1: "reference_answer",
	2: "keywords",
}

type SubmitAnswerRequest struct {
	QuestionId int64          `thrift:"question_id,1,required" frugal:"1,required,i64" json:"question_id"`
	StudentId  int64          `thrift:"student_id,2,required" frugal:"2,required,i64" json:"student_id"`
	Type       string         `thrift:"type,3,required" frugal:"3,required,string" json:"type"`
	Content    *AnswerContent `thrift:"content,4,required" frugal:"4,required,AnswerContent" json:"content"`
}

func NewSubmitAnswerRequest() *SubmitAnswerRequest {
	return &SubmitAnswerRequest{}
}

func (p *SubmitAnswerRequest) InitDefault() {
}

func (p *SubmitAnswerRequest) GetQuestionId() (v int64) {
	return p.QuestionId
}

func (p *SubmitAnswerRequest) GetStudentId() (v int64) {
	return p.StudentId
}

func (p *SubmitAnswerRequest) GetType() (v string) {
	return p.Type
}

var SubmitAnswerRequest_Content_DEFAULT *AnswerContent

func (p *SubmitAnswerRequest) GetContent() (v *AnswerContent) {
	if !p.IsSetContent() {
		return SubmitAnswerRequest_Content_DEFAULT
	}
	return p.Content
}
func (p *SubmitAnswerRequest) SetQuestionId(val int64) {
	p.QuestionId = val
}
func (p *SubmitAnswerRequest) SetStudentId(val int64) {
	p.StudentId = val
}
func (p *SubmitAnswerRequest) SetType(val string) {
	p.Type = val
}
func (p *SubmitAnswerRequest) SetContent(val *AnswerContent) {
	p.Content = val
}

func (p *SubmitAnswerRequest) IsSetContent() bool {
	return p.Content != nil
}

func (p *SubmitAnswerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitAnswerRequest(%+v)", *p)
}

var fieldIDToName_SubmitAnswerRequest = map[int16]string{
	1: "question_id",
	2: "student_id",
	3: "type",
	4: "content",
}

type AnswerContent struct {
	ChoiceAnswer    *ChoiceAnswer    `thrift:"choice_answer,1,optional" frugal:"1,optional,ChoiceAnswer" json:"choice_answer,omitempty"`
	TrueFalseAnswer *TrueFalseAnswer `thrift:"true_false_answer,2,optional" frugal:"2,optional,TrueFalseAnswer" json:"true_false_answer,omitempty"`
	TextAnswer      *TextAnswer      `thrift:"text_answer,3,optional" frugal:"3,optional,TextAnswer" json:"text_answer,omitempty"`
}

func NewAnswerContent() *AnswerContent {
	return &AnswerContent{}
}

func (p *AnswerContent) InitDefault() {
}

var AnswerContent_ChoiceAnswer_DEFAULT *ChoiceAnswer

func (p *AnswerContent) GetChoiceAnswer() (v *ChoiceAnswer) {
	if !p.IsSetChoiceAnswer() {
		return AnswerContent_ChoiceAnswer_DEFAULT
	}
	return p.ChoiceAnswer
}

var AnswerContent_TrueFalseAnswer_DEFAULT *TrueFalseAnswer

func (p *AnswerContent) GetTrueFalseAnswer() (v *TrueFalseAnswer) {
	if !p.IsSetTrueFalseAnswer() {
		return AnswerContent_TrueFalseAnswer_DEFAULT
	}
	return p.TrueFalseAnswer
}

var AnswerContent_TextAnswer_DEFAULT *TextAnswer

func (p *AnswerContent) GetTextAnswer() (v *TextAnswer) {
	if !p.IsSetTextAnswer() {
		return AnswerContent_TextAnswer_DEFAULT
	}
	return p.TextAnswer
}
func (p *AnswerContent) SetChoiceAnswer(val *ChoiceAnswer) {
	p.ChoiceAnswer = val
}
func (p *AnswerContent) SetTrueFalseAnswer(val *TrueFalseAnswer) {
	p.TrueFalseAnswer = val
}
func (p *AnswerContent) SetTextAnswer(val *TextAnswer) {
	p.TextAnswer = val
}

func (p *AnswerContent) IsSetChoiceAnswer() bool {
	return p.ChoiceAnswer != nil
}

func (p *AnswerContent) IsSetTrueFalseAnswer() bool {
	return p.TrueFalseAnswer != nil
}

func (p *AnswerContent) IsSetTextAnswer() bool {
	return p.TextAnswer != nil
}

func (p *AnswerContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnswerContent(%+v)", *p)
}

var fieldIDToName_AnswerContent = map[int16]string{
	1: "choice_answer",
	2: "true_false_answer",
	3: "text_answer",
}

type ChoiceAnswer struct {
	SelectedId string `thrift:"selected_id,1,required" frugal:"1,required,string" json:"selected_id"`
}

func NewChoiceAnswer() *ChoiceAnswer {
	return &ChoiceAnswer{}
}

func (p *ChoiceAnswer) InitDefault() {
}

func (p *ChoiceAnswer) GetSelectedId() (v string) {
	return p.SelectedId
}
func (p *ChoiceAnswer) SetSelectedId(val string) {
	p.SelectedId = val
}

func (p *ChoiceAnswer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChoiceAnswer(%+v)", *p)
}

var fieldIDToName_ChoiceAnswer = map[int16]string{
	1: "selected_id",
}

type TrueFalseAnswer struct {
	Answer bool `thrift:"answer,1,required" frugal:"1,required,bool" json:"answer"`
}

func NewTrueFalseAnswer() *TrueFalseAnswer {
	return &TrueFalseAnswer{}
}

func (p *TrueFalseAnswer) InitDefault() {
}

func (p *TrueFalseAnswer) GetAnswer() (v bool) {
	return p.Answer
}
func (p *TrueFalseAnswer) SetAnswer(val bool) {
	p.Answer = val
}

func (p *TrueFalseAnswer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrueFalseAnswer(%+v)", *p)
}

var fieldIDToName_TrueFalseAnswer = map[int16]string{
	1: "answer",
}

type TextAnswer struct {
	Content string `thrift:"content,1,required" frugal:"1,required,string" json:"content"`
}

func NewTextAnswer() *TextAnswer {
	return &TextAnswer{}
}

func (p *TextAnswer) InitDefault() {
}

func (p *TextAnswer) GetContent() (v string) {
	return p.Content
}
func (p *TextAnswer) SetContent(val string) {
	p.Content = val
}

func (p *TextAnswer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TextAnswer(%+v)", *p)
}

var fieldIDToName_TextAnswer = map[int16]string{
	1: "content",
}

type SubmitAnswerResponse struct {
	Response *base.BaseResponse `thrift:"response,1" frugal:"1,default,base.BaseResponse" json:"response"`
	Score    *int32             `thrift:"score,2,optional" frugal:"2,optional,i32" json:"score,omitempty"`
}

func NewSubmitAnswerResponse() *SubmitAnswerResponse {
	return &SubmitAnswerResponse{}
}

func (p *SubmitAnswerResponse) InitDefault() {
}

var SubmitAnswerResponse_Response_DEFAULT *base.BaseResponse

func (p *SubmitAnswerResponse) GetResponse() (v *base.BaseResponse) {
	if !p.IsSetResponse() {
		return SubmitAnswerResponse_Response_DEFAULT
	}
	return p.Response
}

var SubmitAnswerResponse_Score_DEFAULT int32

func (p *SubmitAnswerResponse) GetScore() (v int32) {
	if !p.IsSetScore() {
		return SubmitAnswerResponse_Score_DEFAULT
	}
	return *p.Score
}
func (p *SubmitAnswerResponse) SetResponse(val *base.BaseResponse) {
	p.Response = val
}
func (p *SubmitAnswerResponse) SetScore(val *int32) {
	p.Score = val
}

func (p *SubmitAnswerResponse) IsSetResponse() bool {
	return p.Response != nil
}

func (p *SubmitAnswerResponse) IsSetScore() bool {
	return p.Score != nil
}

func (p *SubmitAnswerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitAnswerResponse(%+v)", *p)
}

var fieldIDToName_SubmitAnswerResponse = map[int16]string{
	1: "response",
	2: "score",
}

type ReceiveRequest struct {
	RoomId int64 `thrift:"room_id,1,required" frugal:"1,required,i64" json:"room_id"`
	UserId int64 `thrift:"user_id,2,required" frugal:"2,required,i64" json:"user_id"`
}

func NewReceiveRequest() *ReceiveRequest {
	return &ReceiveRequest{}
}

func (p *ReceiveRequest) InitDefault() {
}

func (p *ReceiveRequest) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *ReceiveRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *ReceiveRequest) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *ReceiveRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *ReceiveRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReceiveRequest(%+v)", *p)
}

var fieldIDToName_ReceiveRequest = map[int16]string{
	1: "room_id",
	2: "user_id",
}

type Msg struct {
	MsgId    string `thrift:"msg_id,1,required" frugal:"1,required,string" json:"msg_id"`
	SenderId int64  `thrift:"sender_id,2" frugal:"2,default,i64" json:"sender_id"`
	Content  string `thrift:"content,3" frugal:"3,default,string" json:"content"`
}

func NewMsg() *Msg {
	return &Msg{}
}

func (p *Msg) InitDefault() {
}

func (p *Msg) GetMsgId() (v string) {
	return p.MsgId
}

func (p *Msg) GetSenderId() (v int64) {
	return p.SenderId
}

func (p *Msg) GetContent() (v string) {
	return p.Content
}
func (p *Msg) SetMsgId(val string) {
	p.MsgId = val
}
func (p *Msg) SetSenderId(val int64) {
	p.SenderId = val
}
func (p *Msg) SetContent(val string) {
	p.Content = val
}

func (p *Msg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Msg(%+v)", *p)
}

var fieldIDToName_Msg = map[int16]string{
	1: "msg_id",
	2: "sender_id",
	3: "content",
}

type ChoiceMsg struct {
	QuestionId string    `thrift:"question_id,1,required" frugal:"1,required,string" json:"question_id"`
	Title      string    `thrift:"title,2,required" frugal:"2,required,string" json:"title"`
	Type       string    `thrift:"type,3,required" frugal:"3,required,string" json:"type"`
	Options    []*Option `thrift:"options,4,required" frugal:"4,required,list<Option>" json:"options"`
}

func NewChoiceMsg() *ChoiceMsg {
	return &ChoiceMsg{}
}

func (p *ChoiceMsg) InitDefault() {
}

func (p *ChoiceMsg) GetQuestionId() (v string) {
	return p.QuestionId
}

func (p *ChoiceMsg) GetTitle() (v string) {
	return p.Title
}

func (p *ChoiceMsg) GetType() (v string) {
	return p.Type
}

func (p *ChoiceMsg) GetOptions() (v []*Option) {
	return p.Options
}
func (p *ChoiceMsg) SetQuestionId(val string) {
	p.QuestionId = val
}
func (p *ChoiceMsg) SetTitle(val string) {
	p.Title = val
}
func (p *ChoiceMsg) SetType(val string) {
	p.Type = val
}
func (p *ChoiceMsg) SetOptions(val []*Option) {
	p.Options = val
}

func (p *ChoiceMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChoiceMsg(%+v)", *p)
}

var fieldIDToName_ChoiceMsg = map[int16]string{
	1: "question_id",
	2: "title",
	3: "type",
	4: "options",
}

type TrueFalseMsg struct {
	QuestionId string `thrift:"question_id,1,required" frugal:"1,required,string" json:"question_id"`
	Title      string `thrift:"title,2,required" frugal:"2,required,string" json:"title"`
	Type       string `thrift:"type,3,required" frugal:"3,required,string" json:"type"`
}

func NewTrueFalseMsg() *TrueFalseMsg {
	return &TrueFalseMsg{}
}

func (p *TrueFalseMsg) InitDefault() {
}

func (p *TrueFalseMsg) GetQuestionId() (v string) {
	return p.QuestionId
}

func (p *TrueFalseMsg) GetTitle() (v string) {
	return p.Title
}

func (p *TrueFalseMsg) GetType() (v string) {
	return p.Type
}
func (p *TrueFalseMsg) SetQuestionId(val string) {
	p.QuestionId = val
}
func (p *TrueFalseMsg) SetTitle(val string) {
	p.Title = val
}
func (p *TrueFalseMsg) SetType(val string) {
	p.Type = val
}

func (p *TrueFalseMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TrueFalseMsg(%+v)", *p)
}

var fieldIDToName_TrueFalseMsg = map[int16]string{
	1: "question_id",
	2: "title",
	3: "type",
}

type TextMsg struct {
	QuestionId string `thrift:"question_id,1,required" frugal:"1,required,string" json:"question_id"`
	Title      string `thrift:"title,2,required" frugal:"2,required,string" json:"title"`
	Type       string `thrift:"type,3,required" frugal:"3,required,string" json:"type"`
}

func NewTextMsg() *TextMsg {
	return &TextMsg{}
}

func (p *TextMsg) InitDefault() {
}

func (p *TextMsg) GetQuestionId() (v string) {
	return p.QuestionId
}

func (p *TextMsg) GetTitle() (v string) {
	return p.Title
}

func (p *TextMsg) GetType() (v string) {
	return p.Type
}
func (p *TextMsg) SetQuestionId(val string) {
	p.QuestionId = val
}
func (p *TextMsg) SetTitle(val string) {
	p.Title = val
}
func (p *TextMsg) SetType(val string) {
	p.Type = val
}

func (p *TextMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TextMsg(%+v)", *p)
}

var fieldIDToName_TextMsg = map[int16]string{
	1: "question_id",
	2: "title",
	3: "type",
}

type ReceiveResponse struct {
	Msg          *Msg          `thrift:"msg,1,optional" frugal:"1,optional,Msg" json:"msg,omitempty"`
	ChoiceMsg    *ChoiceMsg    `thrift:"choice_msg,2,optional" frugal:"2,optional,ChoiceMsg" json:"choice_msg,omitempty"`
	TrueFalseMsg *TrueFalseMsg `thrift:"true_false_msg,3,optional" frugal:"3,optional,TrueFalseMsg" json:"true_false_msg,omitempty"`
	TextMsg      *TextMsg      `thrift:"text_msg,4,optional" frugal:"4,optional,TextMsg" json:"text_msg,omitempty"`
}

func NewReceiveResponse() *ReceiveResponse {
	return &ReceiveResponse{}
}

func (p *ReceiveResponse) InitDefault() {
}

var ReceiveResponse_Msg_DEFAULT *Msg

func (p *ReceiveResponse) GetMsg() (v *Msg) {
	if !p.IsSetMsg() {
		return ReceiveResponse_Msg_DEFAULT
	}
	return p.Msg
}

var ReceiveResponse_ChoiceMsg_DEFAULT *ChoiceMsg

func (p *ReceiveResponse) GetChoiceMsg() (v *ChoiceMsg) {
	if !p.IsSetChoiceMsg() {
		return ReceiveResponse_ChoiceMsg_DEFAULT
	}
	return p.ChoiceMsg
}

var ReceiveResponse_TrueFalseMsg_DEFAULT *TrueFalseMsg

func (p *ReceiveResponse) GetTrueFalseMsg() (v *TrueFalseMsg) {
	if !p.IsSetTrueFalseMsg() {
		return ReceiveResponse_TrueFalseMsg_DEFAULT
	}
	return p.TrueFalseMsg
}

var ReceiveResponse_TextMsg_DEFAULT *TextMsg

func (p *ReceiveResponse) GetTextMsg() (v *TextMsg) {
	if !p.IsSetTextMsg() {
		return ReceiveResponse_TextMsg_DEFAULT
	}
	return p.TextMsg
}
func (p *ReceiveResponse) SetMsg(val *Msg) {
	p.Msg = val
}
func (p *ReceiveResponse) SetChoiceMsg(val *ChoiceMsg) {
	p.ChoiceMsg = val
}
func (p *ReceiveResponse) SetTrueFalseMsg(val *TrueFalseMsg) {
	p.TrueFalseMsg = val
}
func (p *ReceiveResponse) SetTextMsg(val *TextMsg) {
	p.TextMsg = val
}

func (p *ReceiveResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ReceiveResponse) IsSetChoiceMsg() bool {
	return p.ChoiceMsg != nil
}

func (p *ReceiveResponse) IsSetTrueFalseMsg() bool {
	return p.TrueFalseMsg != nil
}

func (p *ReceiveResponse) IsSetTextMsg() bool {
	return p.TextMsg != nil
}

func (p *ReceiveResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReceiveResponse(%+v)", *p)
}

var fieldIDToName_ReceiveResponse = map[int16]string{
	1: "msg",
	2: "choice_msg",
	3: "true_false_msg",
	4: "text_msg",
}

type InteractionService interface {
	CreateRoom(ctx context.Context, request *CreateRoomRequest) (r *CreateRoomResponse, err error)

	SendMessage(ctx context.Context, request *SendMessageRequest) (r *SendMessageResponse, err error)

	CreateQuestion(ctx context.Context, request *CreateQuestionRequest) (r *CreateQuestionResponse, err error)

	SubmitAnswer(ctx context.Context, request *SubmitAnswerRequest) (r *SubmitAnswerResponse, err error)

	Receive(req *ReceiveRequest, stream InteractionService_receiveServer) (err error)
}

type InteractionServiceCreateRoomArgs struct {
	Request *CreateRoomRequest `thrift:"request,1" frugal:"1,default,CreateRoomRequest" json:"request"`
}

func NewInteractionServiceCreateRoomArgs() *InteractionServiceCreateRoomArgs {
	return &InteractionServiceCreateRoomArgs{}
}

func (p *InteractionServiceCreateRoomArgs) InitDefault() {
}

var InteractionServiceCreateRoomArgs_Request_DEFAULT *CreateRoomRequest

func (p *InteractionServiceCreateRoomArgs) GetRequest() (v *CreateRoomRequest) {
	if !p.IsSetRequest() {
		return InteractionServiceCreateRoomArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *InteractionServiceCreateRoomArgs) SetRequest(val *CreateRoomRequest) {
	p.Request = val
}

func (p *InteractionServiceCreateRoomArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *InteractionServiceCreateRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCreateRoomArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceCreateRoomArgs = map[int16]string{
	1: "request",
}

type InteractionServiceCreateRoomResult struct {
	Success *CreateRoomResponse `thrift:"success,0,optional" frugal:"0,optional,CreateRoomResponse" json:"success,omitempty"`
}

func NewInteractionServiceCreateRoomResult() *InteractionServiceCreateRoomResult {
	return &InteractionServiceCreateRoomResult{}
}

func (p *InteractionServiceCreateRoomResult) InitDefault() {
}

var InteractionServiceCreateRoomResult_Success_DEFAULT *CreateRoomResponse

func (p *InteractionServiceCreateRoomResult) GetSuccess() (v *CreateRoomResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceCreateRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceCreateRoomResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateRoomResponse)
}

func (p *InteractionServiceCreateRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceCreateRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCreateRoomResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceCreateRoomResult = map[int16]string{
	0: "success",
}

type InteractionServiceSendMessageArgs struct {
	Request *SendMessageRequest `thrift:"request,1" frugal:"1,default,SendMessageRequest" json:"request"`
}

func NewInteractionServiceSendMessageArgs() *InteractionServiceSendMessageArgs {
	return &InteractionServiceSendMessageArgs{}
}

func (p *InteractionServiceSendMessageArgs) InitDefault() {
}

var InteractionServiceSendMessageArgs_Request_DEFAULT *SendMessageRequest

func (p *InteractionServiceSendMessageArgs) GetRequest() (v *SendMessageRequest) {
	if !p.IsSetRequest() {
		return InteractionServiceSendMessageArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *InteractionServiceSendMessageArgs) SetRequest(val *SendMessageRequest) {
	p.Request = val
}

func (p *InteractionServiceSendMessageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *InteractionServiceSendMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceSendMessageArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceSendMessageArgs = map[int16]string{
	1: "request",
}

type InteractionServiceSendMessageResult struct {
	Success *SendMessageResponse `thrift:"success,0,optional" frugal:"0,optional,SendMessageResponse" json:"success,omitempty"`
}

func NewInteractionServiceSendMessageResult() *InteractionServiceSendMessageResult {
	return &InteractionServiceSendMessageResult{}
}

func (p *InteractionServiceSendMessageResult) InitDefault() {
}

var InteractionServiceSendMessageResult_Success_DEFAULT *SendMessageResponse

func (p *InteractionServiceSendMessageResult) GetSuccess() (v *SendMessageResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceSendMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceSendMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*SendMessageResponse)
}

func (p *InteractionServiceSendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceSendMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceSendMessageResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceSendMessageResult = map[int16]string{
	0: "success",
}

type InteractionServiceCreateQuestionArgs struct {
	Request *CreateQuestionRequest `thrift:"request,1" frugal:"1,default,CreateQuestionRequest" json:"request"`
}

func NewInteractionServiceCreateQuestionArgs() *InteractionServiceCreateQuestionArgs {
	return &InteractionServiceCreateQuestionArgs{}
}

func (p *InteractionServiceCreateQuestionArgs) InitDefault() {
}

var InteractionServiceCreateQuestionArgs_Request_DEFAULT *CreateQuestionRequest

func (p *InteractionServiceCreateQuestionArgs) GetRequest() (v *CreateQuestionRequest) {
	if !p.IsSetRequest() {
		return InteractionServiceCreateQuestionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *InteractionServiceCreateQuestionArgs) SetRequest(val *CreateQuestionRequest) {
	p.Request = val
}

func (p *InteractionServiceCreateQuestionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *InteractionServiceCreateQuestionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCreateQuestionArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceCreateQuestionArgs = map[int16]string{
	1: "request",
}

type InteractionServiceCreateQuestionResult struct {
	Success *CreateQuestionResponse `thrift:"success,0,optional" frugal:"0,optional,CreateQuestionResponse" json:"success,omitempty"`
}

func NewInteractionServiceCreateQuestionResult() *InteractionServiceCreateQuestionResult {
	return &InteractionServiceCreateQuestionResult{}
}

func (p *InteractionServiceCreateQuestionResult) InitDefault() {
}

var InteractionServiceCreateQuestionResult_Success_DEFAULT *CreateQuestionResponse

func (p *InteractionServiceCreateQuestionResult) GetSuccess() (v *CreateQuestionResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceCreateQuestionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceCreateQuestionResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateQuestionResponse)
}

func (p *InteractionServiceCreateQuestionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceCreateQuestionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCreateQuestionResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceCreateQuestionResult = map[int16]string{
	0: "success",
}

type InteractionServiceSubmitAnswerArgs struct {
	Request *SubmitAnswerRequest `thrift:"request,1" frugal:"1,default,SubmitAnswerRequest" json:"request"`
}

func NewInteractionServiceSubmitAnswerArgs() *InteractionServiceSubmitAnswerArgs {
	return &InteractionServiceSubmitAnswerArgs{}
}

func (p *InteractionServiceSubmitAnswerArgs) InitDefault() {
}

var InteractionServiceSubmitAnswerArgs_Request_DEFAULT *SubmitAnswerRequest

func (p *InteractionServiceSubmitAnswerArgs) GetRequest() (v *SubmitAnswerRequest) {
	if !p.IsSetRequest() {
		return InteractionServiceSubmitAnswerArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *InteractionServiceSubmitAnswerArgs) SetRequest(val *SubmitAnswerRequest) {
	p.Request = val
}

func (p *InteractionServiceSubmitAnswerArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *InteractionServiceSubmitAnswerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceSubmitAnswerArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceSubmitAnswerArgs = map[int16]string{
	1: "request",
}

type InteractionServiceSubmitAnswerResult struct {
	Success *SubmitAnswerResponse `thrift:"success,0,optional" frugal:"0,optional,SubmitAnswerResponse" json:"success,omitempty"`
}

func NewInteractionServiceSubmitAnswerResult() *InteractionServiceSubmitAnswerResult {
	return &InteractionServiceSubmitAnswerResult{}
}

func (p *InteractionServiceSubmitAnswerResult) InitDefault() {
}

var InteractionServiceSubmitAnswerResult_Success_DEFAULT *SubmitAnswerResponse

func (p *InteractionServiceSubmitAnswerResult) GetSuccess() (v *SubmitAnswerResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceSubmitAnswerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceSubmitAnswerResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubmitAnswerResponse)
}

func (p *InteractionServiceSubmitAnswerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceSubmitAnswerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceSubmitAnswerResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceSubmitAnswerResult = map[int16]string{
	0: "success",
}

type InteractionServiceReceiveArgs struct {
	Request *ReceiveRequest `thrift:"request,1" frugal:"1,default,ReceiveRequest" json:"request"`
}

func NewInteractionServiceReceiveArgs() *InteractionServiceReceiveArgs {
	return &InteractionServiceReceiveArgs{}
}

func (p *InteractionServiceReceiveArgs) InitDefault() {
}

var InteractionServiceReceiveArgs_Request_DEFAULT *ReceiveRequest

func (p *InteractionServiceReceiveArgs) GetRequest() (v *ReceiveRequest) {
	if !p.IsSetRequest() {
		return InteractionServiceReceiveArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *InteractionServiceReceiveArgs) SetRequest(val *ReceiveRequest) {
	p.Request = val
}

func (p *InteractionServiceReceiveArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *InteractionServiceReceiveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceReceiveArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceReceiveArgs = map[int16]string{
	1: "request",
}

type InteractionServiceReceiveResult struct {
	Success *ReceiveResponse `thrift:"success,0,optional" frugal:"0,optional,ReceiveResponse" json:"success,omitempty"`
}

func NewInteractionServiceReceiveResult() *InteractionServiceReceiveResult {
	return &InteractionServiceReceiveResult{}
}

func (p *InteractionServiceReceiveResult) InitDefault() {
}

var InteractionServiceReceiveResult_Success_DEFAULT *ReceiveResponse

func (p *InteractionServiceReceiveResult) GetSuccess() (v *ReceiveResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceReceiveResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceReceiveResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReceiveResponse)
}

func (p *InteractionServiceReceiveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceReceiveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceReceiveResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceReceiveResult = map[int16]string{
	0: "success",
}

type InteractionService_receiveServer interface {
	streaming.Stream

	Send(*ReceiveResponse) error
}
