// Code generated by hertz generator.

package interaction

import (
	"context"
	"strconv"

	"github.com/Rinai-R/ApexLecture/server/cmd/api/biz/model/interaction"
	"github.com/Rinai-R/ApexLecture/server/cmd/api/config"
	rpc "github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/interaction"
	"github.com/Rinai-R/ApexLecture/server/shared/rsp"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// SendMessage .
// @router /interaction/:roomid/send [POST]
func SendMessage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.SendMessageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter(err.Error()))
		return
	}
	id, ok := c.Get("userid")
	if !ok {
		c.JSON(consts.StatusUnauthorized, rsp.ErrorUnAuthorized("Unknown user"))
		return
	}
	host := id.(float64)
	hostid := int64(host)
	roomid, ok := c.Params.Get("roomid")
	if !ok {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter("Unknown room"))
		return
	}
	RoomID, _ := strconv.ParseInt(roomid, 10, 64)
	resp, _ := config.InteractionClient.SendMessage(ctx, &rpc.SendMessageRequest{
		Message: req.Message,
		UserId:  hostid,
		RoomId:  RoomID,
	})
	switch resp.Response.Code {
	case rsp.Success:
		c.JSON(consts.StatusOK, resp)
	default:
		c.JSON(consts.StatusBadRequest, resp)
	}
}

// CreateQuestion .
// @router /interaction/:roomid/create [POST]
func CreateQuestion(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.CreateQuestionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.CreateQuestionResponse)

	c.JSON(consts.StatusOK, resp)
}

// SubmitAnswer .
// @router /interaction/:roomid/submit [POST]
func SubmitAnswer(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.SubmitAnswerRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.SubmitAnswerResponse)

	c.JSON(consts.StatusOK, resp)
}

// Receive .
// @router /interaction/:roomid/receive [GET]
func Receive(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.ReceiveRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.ReceiveResponse)

	c.JSON(consts.StatusOK, resp)
}
