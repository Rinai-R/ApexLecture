// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package chat

import (
	"context"
	"fmt"
	"github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/base"
)

type ChatMessage struct {
	RoomId int64  `thrift:"roomId,1" frugal:"1,default,i64" json:"roomId"`
	UserId int64  `thrift:"userId,2" frugal:"2,default,i64" json:"userId"`
	Text   string `thrift:"text,3" frugal:"3,default,string" json:"text"`
}

func NewChatMessage() *ChatMessage {
	return &ChatMessage{}
}

func (p *ChatMessage) InitDefault() {
}

func (p *ChatMessage) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *ChatMessage) GetUserId() (v int64) {
	return p.UserId
}

func (p *ChatMessage) GetText() (v string) {
	return p.Text
}
func (p *ChatMessage) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *ChatMessage) SetUserId(val int64) {
	p.UserId = val
}
func (p *ChatMessage) SetText(val string) {
	p.Text = val
}

func (p *ChatMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessage(%+v)", *p)
}

var fieldIDToName_ChatMessage = map[int16]string{
	1: "roomId",
	2: "userId",
	3: "text",
}

type ChatMessageResponse struct {
	Response *base.BaseResponse `thrift:"response,1" frugal:"1,default,base.BaseResponse" json:"response"`
}

func NewChatMessageResponse() *ChatMessageResponse {
	return &ChatMessageResponse{}
}

func (p *ChatMessageResponse) InitDefault() {
}

var ChatMessageResponse_Response_DEFAULT *base.BaseResponse

func (p *ChatMessageResponse) GetResponse() (v *base.BaseResponse) {
	if !p.IsSetResponse() {
		return ChatMessageResponse_Response_DEFAULT
	}
	return p.Response
}
func (p *ChatMessageResponse) SetResponse(val *base.BaseResponse) {
	p.Response = val
}

func (p *ChatMessageResponse) IsSetResponse() bool {
	return p.Response != nil
}

func (p *ChatMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessageResponse(%+v)", *p)
}

var fieldIDToName_ChatMessageResponse = map[int16]string{
	1: "response",
}

type ChatService interface {
	SendChat(ctx context.Context, msg *ChatMessage) (r *ChatMessageResponse, err error)
}

type ChatServiceSendChatArgs struct {
	Msg *ChatMessage `thrift:"msg,1" frugal:"1,default,ChatMessage" json:"msg"`
}

func NewChatServiceSendChatArgs() *ChatServiceSendChatArgs {
	return &ChatServiceSendChatArgs{}
}

func (p *ChatServiceSendChatArgs) InitDefault() {
}

var ChatServiceSendChatArgs_Msg_DEFAULT *ChatMessage

func (p *ChatServiceSendChatArgs) GetMsg() (v *ChatMessage) {
	if !p.IsSetMsg() {
		return ChatServiceSendChatArgs_Msg_DEFAULT
	}
	return p.Msg
}
func (p *ChatServiceSendChatArgs) SetMsg(val *ChatMessage) {
	p.Msg = val
}

func (p *ChatServiceSendChatArgs) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ChatServiceSendChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceSendChatArgs(%+v)", *p)
}

var fieldIDToName_ChatServiceSendChatArgs = map[int16]string{
	1: "msg",
}

type ChatServiceSendChatResult struct {
	Success *ChatMessageResponse `thrift:"success,0,optional" frugal:"0,optional,ChatMessageResponse" json:"success,omitempty"`
}

func NewChatServiceSendChatResult() *ChatServiceSendChatResult {
	return &ChatServiceSendChatResult{}
}

func (p *ChatServiceSendChatResult) InitDefault() {
}

var ChatServiceSendChatResult_Success_DEFAULT *ChatMessageResponse

func (p *ChatServiceSendChatResult) GetSuccess() (v *ChatMessageResponse) {
	if !p.IsSetSuccess() {
		return ChatServiceSendChatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatServiceSendChatResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChatMessageResponse)
}

func (p *ChatServiceSendChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatServiceSendChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceSendChatResult(%+v)", *p)
}

var fieldIDToName_ChatServiceSendChatResult = map[int16]string{
	0: "success",
}
