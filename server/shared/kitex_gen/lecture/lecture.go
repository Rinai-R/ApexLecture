// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package lecture

import (
	"context"
	"fmt"
	"github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/base"
)

type StartRequest struct {
	HostId      int64  `thrift:"hostId,1,required" frugal:"1,required,i64" json:"hostId"`
	Title       string `thrift:"title,2,required" frugal:"2,required,string" json:"title"`
	Description string `thrift:"description,3,required" frugal:"3,required,string" json:"description"`
	Speaker     string `thrift:"speaker,4,required" frugal:"4,required,string" json:"speaker"`
	Sdp         string `thrift:"sdp,5,required" frugal:"5,required,string" json:"sdp"`
}

func NewStartRequest() *StartRequest {
	return &StartRequest{}
}

func (p *StartRequest) InitDefault() {
}

func (p *StartRequest) GetHostId() (v int64) {
	return p.HostId
}

func (p *StartRequest) GetTitle() (v string) {
	return p.Title
}

func (p *StartRequest) GetDescription() (v string) {
	return p.Description
}

func (p *StartRequest) GetSpeaker() (v string) {
	return p.Speaker
}

func (p *StartRequest) GetSdp() (v string) {
	return p.Sdp
}
func (p *StartRequest) SetHostId(val int64) {
	p.HostId = val
}
func (p *StartRequest) SetTitle(val string) {
	p.Title = val
}
func (p *StartRequest) SetDescription(val string) {
	p.Description = val
}
func (p *StartRequest) SetSpeaker(val string) {
	p.Speaker = val
}
func (p *StartRequest) SetSdp(val string) {
	p.Sdp = val
}

func (p *StartRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartRequest(%+v)", *p)
}

var fieldIDToName_StartRequest = map[int16]string{
	1: "hostId",
	2: "title",
	3: "description",
	4: "speaker",
	5: "sdp",
}

type StartResponse struct {
	Response *base.BaseResponse `thrift:"response,1,required" frugal:"1,required,base.BaseResponse" json:"response"`
	RoomId   int64              `thrift:"roomId,2,required" frugal:"2,required,i64" json:"roomId"`
	Answer   string             `thrift:"answer,3,required" frugal:"3,required,string" json:"answer"`
}

func NewStartResponse() *StartResponse {
	return &StartResponse{}
}

func (p *StartResponse) InitDefault() {
}

var StartResponse_Response_DEFAULT *base.BaseResponse

func (p *StartResponse) GetResponse() (v *base.BaseResponse) {
	if !p.IsSetResponse() {
		return StartResponse_Response_DEFAULT
	}
	return p.Response
}

func (p *StartResponse) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *StartResponse) GetAnswer() (v string) {
	return p.Answer
}
func (p *StartResponse) SetResponse(val *base.BaseResponse) {
	p.Response = val
}
func (p *StartResponse) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *StartResponse) SetAnswer(val string) {
	p.Answer = val
}

func (p *StartResponse) IsSetResponse() bool {
	return p.Response != nil
}

func (p *StartResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StartResponse(%+v)", *p)
}

var fieldIDToName_StartResponse = map[int16]string{
	1: "response",
	2: "roomId",
	3: "answer",
}

type AttendRequest struct {
	RoomId int64  `thrift:"roomId,1,required" frugal:"1,required,i64" json:"roomId"`
	UserId int64  `thrift:"userId,2,required" frugal:"2,required,i64" json:"userId"`
	Sdp    string `thrift:"sdp,3,required" frugal:"3,required,string" json:"sdp"`
}

func NewAttendRequest() *AttendRequest {
	return &AttendRequest{}
}

func (p *AttendRequest) InitDefault() {
}

func (p *AttendRequest) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *AttendRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *AttendRequest) GetSdp() (v string) {
	return p.Sdp
}
func (p *AttendRequest) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *AttendRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *AttendRequest) SetSdp(val string) {
	p.Sdp = val
}

func (p *AttendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttendRequest(%+v)", *p)
}

var fieldIDToName_AttendRequest = map[int16]string{
	1: "roomId",
	2: "userId",
	3: "sdp",
}

type AttendResponse struct {
	Response *base.BaseResponse `thrift:"response,1,required" frugal:"1,required,base.BaseResponse" json:"response"`
	Answer   string             `thrift:"answer,2,required" frugal:"2,required,string" json:"answer"`
}

func NewAttendResponse() *AttendResponse {
	return &AttendResponse{}
}

func (p *AttendResponse) InitDefault() {
}

var AttendResponse_Response_DEFAULT *base.BaseResponse

func (p *AttendResponse) GetResponse() (v *base.BaseResponse) {
	if !p.IsSetResponse() {
		return AttendResponse_Response_DEFAULT
	}
	return p.Response
}

func (p *AttendResponse) GetAnswer() (v string) {
	return p.Answer
}
func (p *AttendResponse) SetResponse(val *base.BaseResponse) {
	p.Response = val
}
func (p *AttendResponse) SetAnswer(val string) {
	p.Answer = val
}

func (p *AttendResponse) IsSetResponse() bool {
	return p.Response != nil
}

func (p *AttendResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttendResponse(%+v)", *p)
}

var fieldIDToName_AttendResponse = map[int16]string{
	1: "response",
	2: "answer",
}

type LectureService interface {
	Start(ctx context.Context, request *StartRequest) (r *StartResponse, err error)

	Attend(ctx context.Context, request *AttendRequest) (r *AttendResponse, err error)
}

type LectureServiceStartArgs struct {
	Request *StartRequest `thrift:"request,1" frugal:"1,default,StartRequest" json:"request"`
}

func NewLectureServiceStartArgs() *LectureServiceStartArgs {
	return &LectureServiceStartArgs{}
}

func (p *LectureServiceStartArgs) InitDefault() {
}

var LectureServiceStartArgs_Request_DEFAULT *StartRequest

func (p *LectureServiceStartArgs) GetRequest() (v *StartRequest) {
	if !p.IsSetRequest() {
		return LectureServiceStartArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *LectureServiceStartArgs) SetRequest(val *StartRequest) {
	p.Request = val
}

func (p *LectureServiceStartArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *LectureServiceStartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LectureServiceStartArgs(%+v)", *p)
}

var fieldIDToName_LectureServiceStartArgs = map[int16]string{
	1: "request",
}

type LectureServiceStartResult struct {
	Success *StartResponse `thrift:"success,0,optional" frugal:"0,optional,StartResponse" json:"success,omitempty"`
}

func NewLectureServiceStartResult() *LectureServiceStartResult {
	return &LectureServiceStartResult{}
}

func (p *LectureServiceStartResult) InitDefault() {
}

var LectureServiceStartResult_Success_DEFAULT *StartResponse

func (p *LectureServiceStartResult) GetSuccess() (v *StartResponse) {
	if !p.IsSetSuccess() {
		return LectureServiceStartResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LectureServiceStartResult) SetSuccess(x interface{}) {
	p.Success = x.(*StartResponse)
}

func (p *LectureServiceStartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LectureServiceStartResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LectureServiceStartResult(%+v)", *p)
}

var fieldIDToName_LectureServiceStartResult = map[int16]string{
	0: "success",
}

type LectureServiceAttendArgs struct {
	Request *AttendRequest `thrift:"request,1" frugal:"1,default,AttendRequest" json:"request"`
}

func NewLectureServiceAttendArgs() *LectureServiceAttendArgs {
	return &LectureServiceAttendArgs{}
}

func (p *LectureServiceAttendArgs) InitDefault() {
}

var LectureServiceAttendArgs_Request_DEFAULT *AttendRequest

func (p *LectureServiceAttendArgs) GetRequest() (v *AttendRequest) {
	if !p.IsSetRequest() {
		return LectureServiceAttendArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *LectureServiceAttendArgs) SetRequest(val *AttendRequest) {
	p.Request = val
}

func (p *LectureServiceAttendArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *LectureServiceAttendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LectureServiceAttendArgs(%+v)", *p)
}

var fieldIDToName_LectureServiceAttendArgs = map[int16]string{
	1: "request",
}

type LectureServiceAttendResult struct {
	Success *AttendResponse `thrift:"success,0,optional" frugal:"0,optional,AttendResponse" json:"success,omitempty"`
}

func NewLectureServiceAttendResult() *LectureServiceAttendResult {
	return &LectureServiceAttendResult{}
}

func (p *LectureServiceAttendResult) InitDefault() {
}

var LectureServiceAttendResult_Success_DEFAULT *AttendResponse

func (p *LectureServiceAttendResult) GetSuccess() (v *AttendResponse) {
	if !p.IsSetSuccess() {
		return LectureServiceAttendResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LectureServiceAttendResult) SetSuccess(x interface{}) {
	p.Success = x.(*AttendResponse)
}

func (p *LectureServiceAttendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LectureServiceAttendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LectureServiceAttendResult(%+v)", *p)
}

var fieldIDToName_LectureServiceAttendResult = map[int16]string{
	0: "success",
}
