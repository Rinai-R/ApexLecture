services:
# ========================= DB =======================
    mysql:
        image: mysql:latest
        container_name: mysql
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: 123456
            MYSQL_DATABASE: apex_db
        ports:
            - "3306:3306"
        volumes:
            - ./data/mysql/data:/var/lib/mysql:rw
    redis:
        image: redis:latest
        container_name: redis
        restart: always
        ports:
        - "6379:6379"
        volumes:
        - ./data/redis_data:/data:rw
        command: ["redis-server", "--requirepass", "123456"]
# ============================= ELK ===============================
    elasticsearch:
        image: elasticsearch:8.17.0
        container_name: elasticsearch
        restart: always
        environment:
        - discovery.type=single-node
        - xpack.security.enabled=false
        - xpack.security.enrollment.enabled=false
        ports:
        - "9200:9200"
        - "9300:9300"
        volumes:
        - ./data/es_data:/usr/share/elasticsearch/data:rw
        networks:
            - ELK
    kibana:
        image: kibana:8.17.0
        container_name: kibana
        restart: always
        ports:
        - "5601:5601"
        environment:
        - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
        depends_on:
        - elasticsearch
        networks:
            - ELK
    logstash:
        image: logstash:8.17.0
        container_name: logstash
        restart: always
        volumes:
        - ./tmp/klog:/usr/share/logstash/logs/klog:ro
        - ./tmp/hlog:/usr/share/logstash/logs/hlog:ro
        - ./data/logstash/pipeline:/usr/share/logstash/pipeline:rw
        depends_on:
        - elasticsearch
        networks:
            - ELK
# ============================ Registry ==========================
    etcd-server:
        image: bitnami/etcd:latest
        container_name: etcd
        environment:
        - ALLOW_NONE_AUTHENTICATION=yes
        ports:
        - "2379:2379"
        - "2380:2380"
        restart: always
# ========================= 可观测性 ===============================
    otel-collector:
        image: otel/opentelemetry-collector-contrib:latest
        container_name: otel-collector
        command: [ "--config=/etc/otel-collector-config.yaml" ]
        volumes:
        - ./data/opentelemetry/otel-collector-config.yaml:/etc/otel-collector-config.yaml:rw
        ports:
        - "4317:4317"     # OTLP gRPC
        - "4318:4318"     # OTLP HTTP
        - "55679:55679"   # zPages (调试页面)
        - "8888:8888"     # Prometheus metrics
        - "8889:8889"     # Prometheus exporter
        - "13133:13133"   # 健康检查
        depends_on:
        - jaeger

    jaeger:
        image: jaegertracing/all-in-one:latest
        container_name: jaeger
        environment:
        - COLLECTOR_OTLP_ENABLED=true
        ports:
        - "16686:16686"   # Jaeger UI
        - "14268:14268"   # Jaeger HTTP 接口
        - "14250:14250"   # gRPC 接口（Collector）
        - "6831:6831/udp" # Agent 接口
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        volumes:
        - ./data/prometheus:/etc/prometheus
        ports:
        - "9091:9090"
    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
        - "3000:3000"
        volumes:
        - ./data/grafana:/var/lib/grafana
        environment:
        - GF_SECURITY_ADMIN_USER=admin 
        - GF_SECURITY_ADMIN_PASSWORD=admin
        depends_on:
        - prometheus

# ========================= 对象存储 ==============================
    minio:
        image: minio/minio:latest
        container_name: minio
        environment:
        - MINIO_ROOT_USER=minio
        - MINIO_ROOT_PASSWORD=123456789
        ports:
        - "9000:9000"
        - "9001:9001" 
        command: server /data --console-address ":9001"
        volumes:
        - ./data/minio/data:/data:rw
        - ./data/minio/config:/root/.minio:rw
# ========================= 消息队列 ==============================
    kafka-0:
        image: docker.io/bitnami/kafka:3.9
        ports:
        # kafka-0 暴露 9094 端口
        - "9094:9094"
        environment:
        # Kafka KRaft 配置
        - KAFKA_CFG_NODE_ID=0
        - KAFKA_CFG_PROCESS_ROLES=controller,broker
        - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
        - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
        # 监听器配置 - 修改为支持SASL
        - KAFKA_CFG_LISTENERS=SASL_PLAINTEXT://:9092,CONTROLLER://:9093,SASL_EXTERNAL://0.0.0.0:9094
        - KAFKA_CFG_ADVERTISED_LISTENERS=SASL_PLAINTEXT://kafka-0:9092,SASL_EXTERNAL://localhost:9094
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=SASL_PLAINTEXT:SASL_PLAINTEXT,CONTROLLER:PLAINTEXT,SASL_EXTERNAL:SASL_PLAINTEXT
        - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
        - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=SASL_PLAINTEXT
        # SASL配置
        - KAFKA_CFG_SASL_ENABLED_MECHANISMS=PLAIN
        - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN
        # cluster
        - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
        - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
        - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
        # 认证配置
        - KAFKA_CLIENT_USERS=root
        - KAFKA_CLIENT_PASSWORDS=123456
        volumes:
        - ./data/kafka_0_data:/bitnami/kafka

    kafka-1:
        image: docker.io/bitnami/kafka:3.9
        ports:
        # kafka-1 暴露 9095 端口
        - "9095:9094"
        environment:
        - KAFKA_CFG_NODE_ID=1
        - KAFKA_CFG_PROCESS_ROLES=controller,broker
        - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
        - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
        # 监听器配置 - 修改为支持SASL
        - KAFKA_CFG_LISTENERS=SASL_PLAINTEXT://:9092,CONTROLLER://:9093,SASL_EXTERNAL://0.0.0.0:9094
        - KAFKA_CFG_ADVERTISED_LISTENERS=SASL_PLAINTEXT://kafka-1:9092,SASL_EXTERNAL://localhost:9095
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=SASL_PLAINTEXT:SASL_PLAINTEXT,CONTROLLER:PLAINTEXT,SASL_EXTERNAL:SASL_PLAINTEXT
        - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
        - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=SASL_PLAINTEXT
        # SASL配置
        - KAFKA_CFG_SASL_ENABLED_MECHANISMS=PLAIN
        - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN
        # cluster
        - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
        - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
        - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
        # 认证配置
        - KAFKA_CLIENT_USERS=root
        - KAFKA_CLIENT_PASSWORDS=123456
        volumes:
        - ./data/kafka_1_data:/bitnami/kafka

    kafka-2:
        image: docker.io/bitnami/kafka:3.9
        ports:
        # kafka-2 暴露 9096 端口
        - "9096:9094"
        environment:
        - KAFKA_CFG_NODE_ID=2
        - KAFKA_CFG_PROCESS_ROLES=controller,broker
        - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
        - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
        # 监听器配置 - 修改为支持SASL
        - KAFKA_CFG_LISTENERS=SASL_PLAINTEXT://:9092,CONTROLLER://:9093,SASL_EXTERNAL://0.0.0.0:9094
        - KAFKA_CFG_ADVERTISED_LISTENERS=SASL_PLAINTEXT://kafka-2:9092,SASL_EXTERNAL://localhost:9096
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=SASL_PLAINTEXT:SASL_PLAINTEXT,CONTROLLER:PLAINTEXT,SASL_EXTERNAL:SASL_PLAINTEXT
        - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
        - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=SASL_PLAINTEXT
        # SASL配置
        - KAFKA_CFG_SASL_ENABLED_MECHANISMS=PLAIN
        - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN
        # cluster
        - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
        - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
        - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
        # 认证配置
        - KAFKA_CLIENT_USERS=root
        - KAFKA_CLIENT_PASSWORDS=123456
        volumes:
        - ./data/kafka_2_data:/bitnami/kafka

volumes:
  mysql_data:
  redis_data:
  es_data:
  logstash_data:
  grafana:
  victoria_data:
  kafka_0_data:
    driver: local
  kafka_1_data:
    driver: local
  kafka_2_data:
    driver: local

networks:
  ELK:
    driver: bridge
  kafka-net:
    driver: bridge