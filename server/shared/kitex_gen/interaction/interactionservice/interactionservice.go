// Code generated by Kitex v0.13.1. DO NOT EDIT.

package interactionservice

import (
	"context"
	"errors"
	"fmt"
	interaction "github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/interaction"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"sendMessage": kitex.NewMethodInfo(
		sendMessageHandler,
		newInteractionServiceSendMessageArgs,
		newInteractionServiceSendMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"createQuestion": kitex.NewMethodInfo(
		createQuestionHandler,
		newInteractionServiceCreateQuestionArgs,
		newInteractionServiceCreateQuestionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"submitAnswer": kitex.NewMethodInfo(
		submitAnswerHandler,
		newInteractionServiceSubmitAnswerArgs,
		newInteractionServiceSubmitAnswerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"receive": kitex.NewMethodInfo(
		receiveHandler,
		newInteractionServiceReceiveArgs,
		newInteractionServiceReceiveResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
}

var (
	interactionServiceServiceInfo                = NewServiceInfo()
	interactionServiceServiceInfoForClient       = NewServiceInfoForClient()
	interactionServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*interaction.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceSendMessageArgs)
	realResult := result.(*interaction.InteractionServiceSendMessageResult)
	success, err := handler.(interaction.InteractionService).SendMessage(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceSendMessageArgs() interface{} {
	return interaction.NewInteractionServiceSendMessageArgs()
}

func newInteractionServiceSendMessageResult() interface{} {
	return interaction.NewInteractionServiceSendMessageResult()
}

func createQuestionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceCreateQuestionArgs)
	realResult := result.(*interaction.InteractionServiceCreateQuestionResult)
	success, err := handler.(interaction.InteractionService).CreateQuestion(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceCreateQuestionArgs() interface{} {
	return interaction.NewInteractionServiceCreateQuestionArgs()
}

func newInteractionServiceCreateQuestionResult() interface{} {
	return interaction.NewInteractionServiceCreateQuestionResult()
}

func submitAnswerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceSubmitAnswerArgs)
	realResult := result.(*interaction.InteractionServiceSubmitAnswerResult)
	success, err := handler.(interaction.InteractionService).SubmitAnswer(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceSubmitAnswerArgs() interface{} {
	return interaction.NewInteractionServiceSubmitAnswerArgs()
}

func newInteractionServiceSubmitAnswerResult() interface{} {
	return interaction.NewInteractionServiceSubmitAnswerResult()
}

func receiveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("InteractionService.Receive is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &interactionServicereceiveServer{st.Stream}
	req := new(interaction.ReceiveRequest)
	if err := st.Stream.RecvMsg(req); err != nil {
		return err
	}
	return handler.(interaction.InteractionService).Receive(req, stream)
}

type interactionServicereceiveClient struct {
	streaming.Stream
}

func (x *interactionServicereceiveClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *interactionServicereceiveClient) Recv() (*interaction.ReceiveResponse, error) {
	m := new(interaction.ReceiveResponse)
	return m, x.Stream.RecvMsg(m)
}

type interactionServicereceiveServer struct {
	streaming.Stream
}

func (x *interactionServicereceiveServer) Send(m *interaction.ReceiveResponse) error {
	return x.Stream.SendMsg(m)
}

func newInteractionServiceReceiveArgs() interface{} {
	return interaction.NewInteractionServiceReceiveArgs()
}

func newInteractionServiceReceiveResult() interface{} {
	return interaction.NewInteractionServiceReceiveResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMessage(ctx context.Context, request *interaction.SendMessageRequest) (r *interaction.SendMessageResponse, err error) {
	var _args interaction.InteractionServiceSendMessageArgs
	_args.Request = request
	var _result interaction.InteractionServiceSendMessageResult
	if err = p.c.Call(ctx, "sendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateQuestion(ctx context.Context, request *interaction.CreateQuestionRequest) (r *interaction.CreateQuestionResponse, err error) {
	var _args interaction.InteractionServiceCreateQuestionArgs
	_args.Request = request
	var _result interaction.InteractionServiceCreateQuestionResult
	if err = p.c.Call(ctx, "createQuestion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubmitAnswer(ctx context.Context, request *interaction.SubmitAnswerRequest) (r *interaction.SubmitAnswerResponse, err error) {
	var _args interaction.InteractionServiceSubmitAnswerArgs
	_args.Request = request
	var _result interaction.InteractionServiceSubmitAnswerResult
	if err = p.c.Call(ctx, "submitAnswer", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Receive(ctx context.Context, request *interaction.ReceiveRequest) (InteractionService_receiveClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "receive", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &interactionServicereceiveClient{res.Stream}

	if err := stream.Stream.SendMsg(request); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}
