// Code generated by hertz generator.

package quiz

import (
	"context"
	"strconv"

	quiz "github.com/Rinai-R/ApexLecture/server/cmd/api/biz/model/quiz"
	"github.com/Rinai-R/ApexLecture/server/cmd/api/config"
	rpc "github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/quiz"
	"github.com/Rinai-R/ApexLecture/server/shared/rsp"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// SubmitQuestion .
// @router /quiz/:roomid/question [POST]
func SubmitQuestion(ctx context.Context, c *app.RequestContext) {
	var err error
	var req quiz.SubmitQuestionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userid, ok := c.Get("userid")
	if !ok {
		c.JSON(consts.StatusBadRequest, rsp.ErrorUnAuthorized("Unknown user"))
		return
	}
	userId := userid.(float64)
	UserId := int64(userId)
	roomid, ok := c.Params.Get("roomid")
	if !ok {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter("roomid is required"))
		return
	}
	RoomId, err := strconv.ParseInt(roomid, 10, 64)
	if err != nil {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter("roomid is invalid"))
		return
	}
	resp, _ := config.QuizClient.SubmitQuestion(ctx, &rpc.SubmitQuestionRequest{
		Type:   req.Type,
		UserId: UserId,
		RoomId: RoomId,
		Payload: &rpc.Payload{
			Choice: &rpc.Choice{
				Title:   req.Payload.Choice.Title,
				Options: req.Payload.Choice.Options,
				Answers: req.Payload.Choice.Answers,
			},
			Judge: &rpc.Judge{
				Title:  req.Payload.Judge.Title,
				Answer: req.Payload.Judge.Answer,
			},
		},
	})
	switch resp.Response.Code {
	case rsp.Success:
		c.JSON(consts.StatusOK, resp)
	default:
		c.JSON(consts.StatusBadRequest, resp)
	}
}

// SubmitAnswer .
// @router /quiz/:roomid/answer [POST]
func SubmitAnswer(ctx context.Context, c *app.RequestContext) {
	var err error
	var req quiz.SubmitAnswerRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userid, ok := c.Get("userid")
	if !ok {
		c.JSON(consts.StatusBadRequest, rsp.ErrorUnAuthorized("Unknown user"))
		return
	}
	userId := userid.(float64)
	UserId := int64(userId)
	roomid, ok := c.Params.Get("roomid")
	if !ok {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter("roomid is required"))
		return
	}
	RoomId, err := strconv.ParseInt(roomid, 10, 64)
	if err != nil {
		c.JSON(consts.StatusBadRequest, rsp.ErrorParameter("roomid is invalid"))
		return
	}
	resp, _ := config.QuizClient.SubmitAnswer(ctx, &rpc.SubmitAnswerRequest{
		QuestionId: req.QuestionId,
		Type:       req.Type,
		UserId:     UserId,
		RoomId:     RoomId,
		Payload: &rpc.AnswerPayload{
			Choice: &rpc.ChoiceAnswer{
				Answer: req.Payload.Choice.Answer,
			},
			Judge: &rpc.JudgeAnswer{
				Answer: req.Payload.Judge.Answer,
			},
		},
	})
	switch resp.Response.Code {
	case rsp.Success:
		c.JSON(consts.StatusOK, resp)
	default:
		c.JSON(consts.StatusBadRequest, resp)
	}
}
