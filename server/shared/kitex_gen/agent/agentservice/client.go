// Code generated by Kitex v0.13.1. DO NOT EDIT.

package agentservice

import (
	"context"
	agent "github.com/Rinai-R/ApexLecture/server/shared/kitex_gen/agent"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Ask(ctx context.Context, askRequest *agent.AskRequest, callOptions ...callopt.Option) (r *agent.AskResponse, err error)
	StartSummary(ctx context.Context, summaryRequest *agent.StartSummaryRequest, callOptions ...callopt.Option) (r *agent.StartSummaryResponse, err error)
	GetSummary(ctx context.Context, summaryRequest *agent.GetSummaryRequest, callOptions ...callopt.Option) (r *agent.GetSummaryResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kAgentServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAgentServiceClient struct {
	*kClient
}

func (p *kAgentServiceClient) Ask(ctx context.Context, askRequest *agent.AskRequest, callOptions ...callopt.Option) (r *agent.AskResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Ask(ctx, askRequest)
}

func (p *kAgentServiceClient) StartSummary(ctx context.Context, summaryRequest *agent.StartSummaryRequest, callOptions ...callopt.Option) (r *agent.StartSummaryResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.StartSummary(ctx, summaryRequest)
}

func (p *kAgentServiceClient) GetSummary(ctx context.Context, summaryRequest *agent.GetSummaryRequest, callOptions ...callopt.Option) (r *agent.GetSummaryResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSummary(ctx, summaryRequest)
}
