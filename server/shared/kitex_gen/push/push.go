// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package push

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/pkg/streaming"
)

type ChatMessage struct {
	RoomId int64  `thrift:"roomId,1,required" frugal:"1,required,i64" json:"roomId"`
	UserId int64  `thrift:"userId,2,required" frugal:"2,required,i64" json:"userId"`
	Text   string `thrift:"text,3,required" frugal:"3,required,string" json:"text"`
}

func NewChatMessage() *ChatMessage {
	return &ChatMessage{}
}

func (p *ChatMessage) InitDefault() {
}

func (p *ChatMessage) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *ChatMessage) GetUserId() (v int64) {
	return p.UserId
}

func (p *ChatMessage) GetText() (v string) {
	return p.Text
}
func (p *ChatMessage) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *ChatMessage) SetUserId(val int64) {
	p.UserId = val
}
func (p *ChatMessage) SetText(val string) {
	p.Text = val
}

func (p *ChatMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessage(%+v)", *p)
}

var fieldIDToName_ChatMessage = map[int16]string{
	1: "roomId",
	2: "userId",
	3: "text",
}

type ChoiceQuestion struct {
	RoomId     int64    `thrift:"roomId,1,required" frugal:"1,required,i64" json:"roomId"`
	UserId     int64    `thrift:"userId,2,required" frugal:"2,required,i64" json:"userId"`
	QuestionId int64    `thrift:"questionId,3,required" frugal:"3,required,i64" json:"questionId"`
	Title      string   `thrift:"title,4,required" frugal:"4,required,string" json:"title"`
	Options    []string `thrift:"options,5,required" frugal:"5,required,list<string>" json:"options"`
	Ttl        int64    `thrift:"ttl,6,required" frugal:"6,required,i64" json:"ttl"`
}

func NewChoiceQuestion() *ChoiceQuestion {
	return &ChoiceQuestion{}
}

func (p *ChoiceQuestion) InitDefault() {
}

func (p *ChoiceQuestion) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *ChoiceQuestion) GetUserId() (v int64) {
	return p.UserId
}

func (p *ChoiceQuestion) GetQuestionId() (v int64) {
	return p.QuestionId
}

func (p *ChoiceQuestion) GetTitle() (v string) {
	return p.Title
}

func (p *ChoiceQuestion) GetOptions() (v []string) {
	return p.Options
}

func (p *ChoiceQuestion) GetTtl() (v int64) {
	return p.Ttl
}
func (p *ChoiceQuestion) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *ChoiceQuestion) SetUserId(val int64) {
	p.UserId = val
}
func (p *ChoiceQuestion) SetQuestionId(val int64) {
	p.QuestionId = val
}
func (p *ChoiceQuestion) SetTitle(val string) {
	p.Title = val
}
func (p *ChoiceQuestion) SetOptions(val []string) {
	p.Options = val
}
func (p *ChoiceQuestion) SetTtl(val int64) {
	p.Ttl = val
}

func (p *ChoiceQuestion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChoiceQuestion(%+v)", *p)
}

var fieldIDToName_ChoiceQuestion = map[int16]string{
	1: "roomId",
	2: "userId",
	3: "questionId",
	4: "title",
	5: "options",
	6: "ttl",
}

type JudgeQuestion struct {
	RoomId     int64  `thrift:"roomId,1,required" frugal:"1,required,i64" json:"roomId"`
	UserId     int64  `thrift:"userId,2,required" frugal:"2,required,i64" json:"userId"`
	QuestionId int64  `thrift:"questionId,3,required" frugal:"3,required,i64" json:"questionId"`
	Title      string `thrift:"title,4,required" frugal:"4,required,string" json:"title"`
	Ttl        int64  `thrift:"ttl,5,required" frugal:"5,required,i64" json:"ttl"`
}

func NewJudgeQuestion() *JudgeQuestion {
	return &JudgeQuestion{}
}

func (p *JudgeQuestion) InitDefault() {
}

func (p *JudgeQuestion) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *JudgeQuestion) GetUserId() (v int64) {
	return p.UserId
}

func (p *JudgeQuestion) GetQuestionId() (v int64) {
	return p.QuestionId
}

func (p *JudgeQuestion) GetTitle() (v string) {
	return p.Title
}

func (p *JudgeQuestion) GetTtl() (v int64) {
	return p.Ttl
}
func (p *JudgeQuestion) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *JudgeQuestion) SetUserId(val int64) {
	p.UserId = val
}
func (p *JudgeQuestion) SetQuestionId(val int64) {
	p.QuestionId = val
}
func (p *JudgeQuestion) SetTitle(val string) {
	p.Title = val
}
func (p *JudgeQuestion) SetTtl(val int64) {
	p.Ttl = val
}

func (p *JudgeQuestion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JudgeQuestion(%+v)", *p)
}

var fieldIDToName_JudgeQuestion = map[int16]string{
	1: "roomId",
	2: "userId",
	3: "questionId",
	4: "title",
	5: "ttl",
}

type QuizStatus struct {
	RoomId      int64   `thrift:"roomId,1,required" frugal:"1,required,i64" json:"roomId"`
	QuestionId  int64   `thrift:"questionId,2,required" frugal:"2,required,i64" json:"questionId"`
	RequiredNum int64   `thrift:"requiredNum,3,required" frugal:"3,required,i64" json:"requiredNum"`
	CurrentNum  int64   `thrift:"currentNum,4,required" frugal:"4,required,i64" json:"currentNum"`
	AcceptRate  float64 `thrift:"acceptRate,5,required" frugal:"5,required,double" json:"acceptRate"`
}

func NewQuizStatus() *QuizStatus {
	return &QuizStatus{}
}

func (p *QuizStatus) InitDefault() {
}

func (p *QuizStatus) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *QuizStatus) GetQuestionId() (v int64) {
	return p.QuestionId
}

func (p *QuizStatus) GetRequiredNum() (v int64) {
	return p.RequiredNum
}

func (p *QuizStatus) GetCurrentNum() (v int64) {
	return p.CurrentNum
}

func (p *QuizStatus) GetAcceptRate() (v float64) {
	return p.AcceptRate
}
func (p *QuizStatus) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *QuizStatus) SetQuestionId(val int64) {
	p.QuestionId = val
}
func (p *QuizStatus) SetRequiredNum(val int64) {
	p.RequiredNum = val
}
func (p *QuizStatus) SetCurrentNum(val int64) {
	p.CurrentNum = val
}
func (p *QuizStatus) SetAcceptRate(val float64) {
	p.AcceptRate = val
}

func (p *QuizStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuizStatus(%+v)", *p)
}

var fieldIDToName_QuizStatus = map[int16]string{
	1: "roomId",
	2: "questionId",
	3: "requiredNum",
	4: "currentNum",
	5: "acceptRate",
}

type ControlMessage struct {
	RoomId    int64  `thrift:"roomId,2,required" frugal:"2,required,i64" json:"roomId"`
	Operation string `thrift:"operation,3,required" frugal:"3,required,string" json:"operation"`
}

func NewControlMessage() *ControlMessage {
	return &ControlMessage{}
}

func (p *ControlMessage) InitDefault() {
}

func (p *ControlMessage) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *ControlMessage) GetOperation() (v string) {
	return p.Operation
}
func (p *ControlMessage) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *ControlMessage) SetOperation(val string) {
	p.Operation = val
}

func (p *ControlMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ControlMessage(%+v)", *p)
}

var fieldIDToName_ControlMessage = map[int16]string{
	2: "roomId",
	3: "operation",
}

type PushMessageResponse struct {
	Type    int8     `thrift:"type,1,required" frugal:"1,required,i8" json:"type"`
	Payload *Payload `thrift:"payload,2,required" frugal:"2,required,Payload" json:"payload"`
}

func NewPushMessageResponse() *PushMessageResponse {
	return &PushMessageResponse{}
}

func (p *PushMessageResponse) InitDefault() {
}

func (p *PushMessageResponse) GetType() (v int8) {
	return p.Type
}

var PushMessageResponse_Payload_DEFAULT *Payload

func (p *PushMessageResponse) GetPayload() (v *Payload) {
	if !p.IsSetPayload() {
		return PushMessageResponse_Payload_DEFAULT
	}
	return p.Payload
}
func (p *PushMessageResponse) SetType(val int8) {
	p.Type = val
}
func (p *PushMessageResponse) SetPayload(val *Payload) {
	p.Payload = val
}

func (p *PushMessageResponse) IsSetPayload() bool {
	return p.Payload != nil
}

func (p *PushMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushMessageResponse(%+v)", *p)
}

var fieldIDToName_PushMessageResponse = map[int16]string{
	1: "type",
	2: "payload",
}

type PushMessageRequest struct {
	RoomId int64 `thrift:"roomId,1,required" frugal:"1,required,i64" json:"roomId"`
	UserId int64 `thrift:"userId,2,required" frugal:"2,required,i64" json:"userId"`
}

func NewPushMessageRequest() *PushMessageRequest {
	return &PushMessageRequest{}
}

func (p *PushMessageRequest) InitDefault() {
}

func (p *PushMessageRequest) GetRoomId() (v int64) {
	return p.RoomId
}

func (p *PushMessageRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *PushMessageRequest) SetRoomId(val int64) {
	p.RoomId = val
}
func (p *PushMessageRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *PushMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushMessageRequest(%+v)", *p)
}

var fieldIDToName_PushMessageRequest = map[int16]string{
	1: "roomId",
	2: "userId",
}

type Payload struct {
	ChatMessage    *ChatMessage    `thrift:"chatMessage,1,optional" frugal:"1,optional,ChatMessage" json:"chatMessage,omitempty"`
	ChoiceQuestion *ChoiceQuestion `thrift:"choiceQuestion,2,optional" frugal:"2,optional,ChoiceQuestion" json:"choiceQuestion,omitempty"`
	JudgeQuestion  *JudgeQuestion  `thrift:"judgeQuestion,3,optional" frugal:"3,optional,JudgeQuestion" json:"judgeQuestion,omitempty"`
	QuizStatus     *QuizStatus     `thrift:"quizStatus,4,optional" frugal:"4,optional,QuizStatus" json:"quizStatus,omitempty"`
	ControlMessage *ControlMessage `thrift:"controlMessage,5,optional" frugal:"5,optional,ControlMessage" json:"controlMessage,omitempty"`
}

func NewPayload() *Payload {
	return &Payload{}
}

func (p *Payload) InitDefault() {
}

var Payload_ChatMessage_DEFAULT *ChatMessage

func (p *Payload) GetChatMessage() (v *ChatMessage) {
	if !p.IsSetChatMessage() {
		return Payload_ChatMessage_DEFAULT
	}
	return p.ChatMessage
}

var Payload_ChoiceQuestion_DEFAULT *ChoiceQuestion

func (p *Payload) GetChoiceQuestion() (v *ChoiceQuestion) {
	if !p.IsSetChoiceQuestion() {
		return Payload_ChoiceQuestion_DEFAULT
	}
	return p.ChoiceQuestion
}

var Payload_JudgeQuestion_DEFAULT *JudgeQuestion

func (p *Payload) GetJudgeQuestion() (v *JudgeQuestion) {
	if !p.IsSetJudgeQuestion() {
		return Payload_JudgeQuestion_DEFAULT
	}
	return p.JudgeQuestion
}

var Payload_QuizStatus_DEFAULT *QuizStatus

func (p *Payload) GetQuizStatus() (v *QuizStatus) {
	if !p.IsSetQuizStatus() {
		return Payload_QuizStatus_DEFAULT
	}
	return p.QuizStatus
}

var Payload_ControlMessage_DEFAULT *ControlMessage

func (p *Payload) GetControlMessage() (v *ControlMessage) {
	if !p.IsSetControlMessage() {
		return Payload_ControlMessage_DEFAULT
	}
	return p.ControlMessage
}
func (p *Payload) SetChatMessage(val *ChatMessage) {
	p.ChatMessage = val
}
func (p *Payload) SetChoiceQuestion(val *ChoiceQuestion) {
	p.ChoiceQuestion = val
}
func (p *Payload) SetJudgeQuestion(val *JudgeQuestion) {
	p.JudgeQuestion = val
}
func (p *Payload) SetQuizStatus(val *QuizStatus) {
	p.QuizStatus = val
}
func (p *Payload) SetControlMessage(val *ControlMessage) {
	p.ControlMessage = val
}

func (p *Payload) CountSetFieldsPayload() int {
	count := 0
	if p.IsSetChatMessage() {
		count++
	}
	if p.IsSetChoiceQuestion() {
		count++
	}
	if p.IsSetJudgeQuestion() {
		count++
	}
	if p.IsSetQuizStatus() {
		count++
	}
	if p.IsSetControlMessage() {
		count++
	}
	return count
}

func (p *Payload) IsSetChatMessage() bool {
	return p.ChatMessage != nil
}

func (p *Payload) IsSetChoiceQuestion() bool {
	return p.ChoiceQuestion != nil
}

func (p *Payload) IsSetJudgeQuestion() bool {
	return p.JudgeQuestion != nil
}

func (p *Payload) IsSetQuizStatus() bool {
	return p.QuizStatus != nil
}

func (p *Payload) IsSetControlMessage() bool {
	return p.ControlMessage != nil
}

func (p *Payload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Payload(%+v)", *p)
}

var fieldIDToName_Payload = map[int16]string{
	1: "chatMessage",
	2: "choiceQuestion",
	3: "judgeQuestion",
	4: "quizStatus",
	5: "controlMessage",
}

type PushService interface {
	Receive(ctx context.Context, req *PushMessageRequest, stream PushService_ReceiveServer) (err error)
}

type PushServiceReceiveArgs struct {
	Request *PushMessageRequest `thrift:"request,1" frugal:"1,default,PushMessageRequest" json:"request"`
}

func NewPushServiceReceiveArgs() *PushServiceReceiveArgs {
	return &PushServiceReceiveArgs{}
}

func (p *PushServiceReceiveArgs) InitDefault() {
}

var PushServiceReceiveArgs_Request_DEFAULT *PushMessageRequest

func (p *PushServiceReceiveArgs) GetRequest() (v *PushMessageRequest) {
	if !p.IsSetRequest() {
		return PushServiceReceiveArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PushServiceReceiveArgs) SetRequest(val *PushMessageRequest) {
	p.Request = val
}

func (p *PushServiceReceiveArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PushServiceReceiveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushServiceReceiveArgs(%+v)", *p)
}

var fieldIDToName_PushServiceReceiveArgs = map[int16]string{
	1: "request",
}

type PushServiceReceiveResult struct {
	Success *PushMessageResponse `thrift:"success,0,optional" frugal:"0,optional,PushMessageResponse" json:"success,omitempty"`
}

func NewPushServiceReceiveResult() *PushServiceReceiveResult {
	return &PushServiceReceiveResult{}
}

func (p *PushServiceReceiveResult) InitDefault() {
}

var PushServiceReceiveResult_Success_DEFAULT *PushMessageResponse

func (p *PushServiceReceiveResult) GetSuccess() (v *PushMessageResponse) {
	if !p.IsSetSuccess() {
		return PushServiceReceiveResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PushServiceReceiveResult) SetSuccess(x interface{}) {
	p.Success = x.(*PushMessageResponse)
}

func (p *PushServiceReceiveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PushServiceReceiveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushServiceReceiveResult(%+v)", *p)
}

var fieldIDToName_PushServiceReceiveResult = map[int16]string{
	0: "success",
}

type PushService_ReceiveServer streaming.ServerStreamingServer[PushMessageResponse]
